{"version":3,"sources":["scenes/Account/components/User/User.module.scss","scenes/Account/components/PostsBlock/PostsBlock.module.scss","scenes/AdminPanel/components/Users/Users.module.scss","components/Header/Header.module.scss","scenes/Auth/Register/Register.module.scss","scenes/Auth/Login/Login.module.scss","scenes/Account/Account.module.scss","img/none.svg","scenes/CreatePost/CreatePost.module.scss","components/Form/UsersSelect/UsersSelect.module.scss","scenes/EditPost/EditPost.module.scss","scenes/AdminPanel/AdminPanel.module.scss","components/Post/Post.module.scss","api/index.js","api/utils.js","stores/utils.js","stores/auth/AuthStore.js","stores/cathedras/CathedraModel.js","stores/posts/PeriodicityModel.js","stores/posts/MonographModel.js","stores/posts/ThesisModel.js","stores/users/UserModel.js","stores/users/ViewerStore.js","stores/schemas.js","stores/cathedras/CathedrasStore.js","stores/users/usersCollection.js","stores/cathedras/cathedrasCollection.js","stores/posts/periodicityCollection.js","stores/posts/monographsCollection.js","stores/posts/thesisCollection.js","stores/EntitiesStore.js","stores/files/FilesStore.js","stores/users/UsersStore.js","stores/posts/UserPostsStore.js","stores/RootStore.js","stores/createStore.js","components/elements/Avatar/Avatar.js","components/Header/Header.js","scenes/Home/Home.js","components/Form/Error/Error.js","components/Form/Field/Field.js","components/Messages/ErrorMessage.js","components/Form/SelectField/SelectField.js","components/Form/CathedrasSelect/CathedrasSelect.js","scenes/Auth/Register/components/RegisterForm.js","scenes/Auth/Register/Register.js","scenes/Auth/Login/components/LoginForm.js","scenes/Auth/Login/Login.js","scenes/Auth/Auth.js","components/EditForm/EditForm.js","scenes/Account/components/User/User.js","scenes/Account/components/PostsBlock/PostsBlock.js","scenes/Account/Account.js","components/Form/UsersSelect/UsersSelect.js","components/PostForms/MonographForm.js","components/PostForms/PeriodicityForm.js","components/PostForms/ThesisForm.js","scenes/CreatePost/CreatePost.js","components/Post/Post.js","scenes/PeriodicPost/PeriodicPost.js","scenes/MonographPost/MonographPost.js","scenes/ThesisPost/ThesisPost.js","scenes/EditPost/EditPost.js","scenes/AdminPanel/components/Users/Users.js","scenes/AdminPanel/AdminPanel.js","scenes/routes.js","components/elements/Loader/Loader.js","components/App/App.js","index.js"],"names":["module","exports","Auth","_token","_refreshToken","setTokens","token","refreshToken","this","accessToken","localStorage","setItem","axios","defaults","headers","Authorization","isLoggedIn","logout","removeItem","undefined","login","username","password","post","register","fullName","email","passConfirm","isTeacher","cathedraId","Cathedra","get","id","Users","data","put","avatar","delete","Posts","createPeriodicity","createThesis","createMonograph","getPeriodicity","getThesis","getMonograph","editPeriodicity","editThesis","editMonograph","deletePeriodicity","deleteThesis","deleteMonograph","Files","AsyncModel","thunk","auto","model","t","isLoading","isError","errorMsg","maybeNull","union","string","frozen","redirect","actions","store","start","finish","error","err","response","setRedirect","value","merge","schema","normalize","result","entities","getRoot","run","promise","getParent","_auto","console","log","optional","createCollection","ofModel","asyncModels","collection","map","views","key","String","add","set","remove","root","item","destroy","editFiles","files","apiMethod","flow","parent","a","upload","then","file","getSnapshot","items","setFiles","apiPath","filename","deletePost","window","location","reload","editPost","res","applySnapshot","AuthStore","Api","viewer","setViewer","user","auth","setIsLoggedIn","CathedraModel","identifierNumber","name","PeriodicityModel","author","number","subauthors","udc","title","journal","issueNumber","journalPages","pages","annotations","issn","doi","isScopusAndWS","isScientometrics","isProfessional","isElectronic","createdAt","updatedAt","MonographModel","section","monographPages","printPages","year","isbn","isEuLanguage","ThesisModel","conference","city","dates","collectionPages","isInternational","UserModel","identifier","maybe","isAdmin","bio","Periodicities","array","Monographs","Theses","cathedra","reference","cathedras","usernameString","preProcessSnapshot","snapshot","ViewerModel","named","ViewerStore","userModel","edit","changeAvatar","PeriodicityPost","Entity","ThesisPost","MonographPost","PeriodicityCollection","ThesisCollection","MonographCollection","User","idAttribute","entity","UserCollection","CathedraCollection","CathedrasStore","fetchAll","setItems","useUserCollection","useStore","users","usersCollection","getUser","deleteById","cathedrasCollection","getById","usePeriodicityCollection","periodicity","periodicityCollection","useMonographsCollection","monographs","monographsCollection","useThesisCollection","thesis","thesisCollection","EntitiesStore","Object","keys","forEach","collectionName","collectionEntities","FilesStore","FormData","append","getItems","UsersStore","filter","UserPostsStore","periodic","addPeriodic","pushItem","addThesis","addMonograph","fetchUserPosts","periodicityIds","monographsIds","thesisIds","field","push","RootStore","userPosts","bootstrap","getItem","createStore","create","onSnapshot","JSON","stringify","rehydrate","parse","MSTContext","createContext","Provider","mapStateToProps","useContext","Avatar","src","Image","Icon","size","observer","history","useHistory","pathToAccount","generatePath","routes","account","Container","fluid","Menu","color","colors","main","inverted","attached","Item","as","to","home","className","s","logo","position","Dropdown","trigger","icon","Link","text","createPost","adminPanel","Divider","onClick","activeClassName","nav_active","nav","Home","Error","children","Label","basic","pointing","Field","label","required","type","props","useState","show","setShow","useField","meta","isPassword","isCheckbox","isTextarea","fieldType","checkbox","Checkbox","checked","textarea","TextArea","style","minHeight","others","Input","Button","Form","touched","ErrorMessage","errors","header","Message","content","msg","SelectField","setFieldValue","defaultValue","formik","multiple","getValue","active","setActive","searchString","setSearchString","selected","setSelected","search","selection","onSelectChange","val","onRequestClose","onSearchStringChange","useEffect","Fragment","e","placeholder","disabled","loading","onSubmit","formikProps","initialValues","validationSchema","Yup","shape","min","max","when","is","nullable","otherwise","values","handleSubmit","isMatch","noValidate","form","warning","path","component","Register","Login","cancelEdit","isViewer","currentUsername","currentEmail","Group","Or","positive","image","setImage","editMode","setEditMode","addImageRef","React","createRef","cathedraCollection","pathToCathedra","cathedraName","img","NoneImage","second","labelPosition","current","click","onChange","target","ref","edit_button","neutral","user__info","href","link","length","textAlign","divided","created","Date","Content","Header","Meta","date","toLocaleDateString","tags","tag","subauthor","mainAuthor","Description","desc","Extra","floated","params","useParams","postsLoaded","container","Segment","padded","widths","NavLink","render","periodicityPost","monographPost","thesisPost","oneValue","light_text","split","submitForm","marginBottom","Record","useCollection","apiMethodForPostEdit","apiMethodForDelete","updated","segment","info","Children","child","cloneElement","horizontal","add_btn","file_attached","accept","icons","bottom","toLocaleTimeString","action_icons","postId","isPeriodicity","isThesis","isMonograph","postRoute","PostsList","posts","postCollection","activeIndex","setActiveIndex","activeIndexPost","setActiveIndexPost","editUserMode","setEditUserMode","monographCollection","handleClick","titleProps","index","handleClickPost","closeEditUserMode","Accordion","styled","Title","apiMethodForEdit","activeItem","setActiveItem","handleItemClick","Grid","Column","width","vertical","tabular","stretched","PrivateRouter","Component","renderProps","Router","exact","CreatePost","EditPost","Account","PeriodicPost","AdminPanel","Loader","setIsLoading","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fd9c2398.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"user\":\"User_user__2_PPZ\",\"img\":\"User_img__27A7Q\",\"user__info\":\"User_user__info__2JLJv\",\"link\":\"User_link__3mX2p\",\"bio\":\"User_bio__35PN-\",\"edit_button\":\"User_edit_button__2l0r6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"PostsBlock_item__nEqrl\",\"date\":\"PostsBlock_date__3njRE\",\"subauthor\":\"PostsBlock_subauthor__3R2vS\",\"mainAuthor\":\"PostsBlock_mainAuthor__C_viJ\",\"desc\":\"PostsBlock_desc__2rdP3\",\"tags\":\"PostsBlock_tags__3qJUx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Users_icon__rvsbg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"Header_logo__1f-_0\",\"nav\":\"Header_nav__3vf5u\",\"nav_active\":\"Header_nav_active__2sNZC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Register_form__3r9Tu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Login_form__3lW6r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Account_container__2sz8J\"};","module.exports = __webpack_public_path__ + \"static/media/none.e80d50ce.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"CreatePost_form__1b5xX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"light_text\":\"UsersSelect_light_text__14p9h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"EditPost_form__pSq35\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AdminPanel_container__3JA3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Post_container__3-Mb4\",\"header\":\"Post_header__1ei55\",\"subauthor\":\"Post_subauthor__coQzx\",\"mainAuthor\":\"Post_mainAuthor__3RAwC\",\"desc\":\"Post_desc__BOnGI\",\"info\":\"Post_info__18LXx\",\"tags\":\"Post_tags__3Zx1U\",\"add_btn\":\"Post_add_btn__1iFoc\",\"file_attached\":\"Post_file_attached__20RR-\",\"bottom\":\"Post_bottom__2biE0\",\"icons\":\"Post_icons__2Yxuw\",\"action_icons\":\"Post_action_icons__Q6GSL\"};","import axios from 'axios';\nimport { setTokens, getRefreshToken, getAccessToken, deleteTokens } from './utils';\n\n// axios.interceptors.request.use(\n//   config => {\n//     if (config.url !== '/api/auth/refreshToken') {\n//       const token = getAccessToken();\n//       console.log('req', config.url)\n//       if (token) {\n//         config.headers['Authorization'] = `Bearer ${token}`;\n//       }\n//\n//       return config;\n//     }\n//     return config;\n//   },\n//   err => Promise.reject(err)\n// );\n\n//--------Refresh token if need\n// axios.interceptors.response.use(\n//   (res) => res,\n//   (err) => {\n//     const originalRequest = err.config;\n//\n//     if (err.response.status === 403 && !originalRequest._retry) {\n//       originalRequest._retry = true;\n//       const refreshToken = getRefreshToken();\n//\n//       if (refreshToken) {\n//         axios.post('/api/auth/refreshToken', { refreshToken })\n//           .then(res => {\n//             Auth.setTokens(res.data.accessToken, res.data.refreshToken);\n//             const token = getAccessToken();\n//             axios.defaults.headers.Authorization = `Bearer ${token}`;\n//             originalRequest.headers['Authorization'] = `Bearer ${token}`;\n//             const request = {...originalRequest, headers: {Authorization: `Bearer ${token}`}};\n//             return axios(request);\n//           })\n//           .catch(err => console.log('refresh error', err));\n//       }\n//     }\n//\n//     if (err.response.status === 401) console.log('log in please');\n//     return Promise.reject(err);\n//   },\n// );\n\nexport const Auth = {\n  _token: null,\n  _refreshToken: null,\n\n  setTokens(token, refreshToken) {\n    this._token = token;\n    this._refreshToken = refreshToken;\n    setTokens(token, refreshToken);\n\n    axios.defaults.headers.Authorization = `Bearer ${token}`;\n  },\n\n  isLoggedIn() {\n    return !!this._token;\n  },\n\n  logout() {\n    this._token = null;\n    deleteTokens();\n    axios.defaults.headers.Authorization = undefined;\n  },\n\n  login({ username, password }) {\n    return axios.post('/api/auth/login', { username, password });\n  },\n\n  refreshToken({ refreshToken }) {\n    return axios.post('/api/auth/refreshToken', { refreshToken });\n  },\n\n  register({ fullName, username, email, password, passConfirm, isTeacher, cathedraId }) {\n    return axios.post('/api/auth/register', {\n      fullName,\n      username,\n      email,\n      password,\n      passConfirm,\n      isTeacher,\n      cathedraId,\n    });\n  },\n};\n\nexport const Cathedra = {\n  getAll() {\n    return axios.get('/api/cathedras');\n  },\n\n  getById(id) {\n    return axios.get(`/api/cathedras/${id}`);\n  },\n};\n\nexport const Users = {\n  getUserPosts(username) {\n    return axios.get(`/api/users/${username}/posts`);\n  },\n\n  getMainUser() {\n    return axios.get('/api/users/account');\n  },\n\n  getUser(username) {\n    return axios.get(`/api/users/${username}`);\n  },\n\n  getAll() {\n    return axios.get('/api/users');\n  },\n\n  edit(data) {\n    return axios.put('/api/users/account', data);\n  },\n\n  changeAvatar(avatar) {\n    return axios.put('/api/users/account/avatar', avatar);\n  },\n\n  deleteById(id) {\n    return axios.delete(`/api/users/${id}`);\n  },\n};\n\nexport const Posts = {\n  createPeriodicity(data) {\n    return axios.post('/api/posts/periodicity', data);\n  },\n\n  createThesis(data) {\n    return axios.post('/api/posts/thesis', data);\n  },\n\n  createMonograph(data) {\n    return axios.post('/api/posts/monograph', data);\n  },\n\n  getPeriodicity(id) {\n    return axios.get(`/api/posts/periodicity/${id}`);\n  },\n\n  getThesis(id) {\n    return axios.get(`/api/posts/thesis/${id}`);\n  },\n\n  getMonograph(id) {\n    return axios.get(`/api/posts/monograph/${id}`);\n  },\n\n  editPeriodicity(id, data) {\n    return axios.put(`/api/posts/periodicity/${id}`, data);\n  },\n\n  editThesis(id, data) {\n    return axios.put(`/api/posts/thesis/${id}`, data);\n  },\n\n  editMonograph(id, data) {\n    return axios.put(`/api/posts/monograph/${id}`, data);\n  },\n\n  deletePeriodicity(id) {\n    return axios.delete(`/api/posts/periodicity/${id}`);\n  },\n\n  deleteThesis(id) {\n    return axios.delete(`/api/posts/thesis/${id}`);\n  },\n\n  deleteMonograph(id) {\n    return axios.delete(`/api/posts/monograph/${id}`);\n  },\n};\n\nexport const Files = {\n  upload(data) {\n    return axios.post('/api/upload', data, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n  },\n};\n","const ACCESS_TOKEN_KEY = '_accessToken';\nconst REFRESH_TOKEN_KEY = '_refreshToken';\n\nexport const setTokens = (accessToken, refreshToken) => {\n  if (accessToken) localStorage.setItem(ACCESS_TOKEN_KEY, accessToken);\n  if (refreshToken) localStorage.setItem(REFRESH_TOKEN_KEY, refreshToken);\n};\n\nexport const getAccessToken = () => {\n  return localStorage.getItem(ACCESS_TOKEN_KEY);\n};\n\nexport const getRefreshToken = () => {\n  return localStorage.getItem(REFRESH_TOKEN_KEY);\n};\n\nexport const deleteTokens = () => {\n  localStorage.removeItem(ACCESS_TOKEN_KEY);\n  localStorage.removeItem(REFRESH_TOKEN_KEY);\n};\n","import {\n  applySnapshot, destroy,\n  getParent,\n  getRoot,\n  getSnapshot,\n  onSnapshot,\n  types as t,\n} from 'mobx-state-tree';\nimport { normalize } from 'normalizr';\nimport { apiPath } from '../components/App/App';\n\nexport function AsyncModel(thunk, auto = true) {\n  const model = t\n    .model({\n      isLoading: false,\n      isError: false,\n      errorMsg: t.maybeNull(t.union(t.string, t.frozen())),\n      redirect: false,\n    })\n    .actions((store) => ({\n      start() {\n        store.isLoading = true;\n        store.isError = false;\n        store.redirect = false;\n        store.errorMsg = null;\n      },\n\n      finish() {\n        store.isLoading = false;\n        store.redirect = false;\n      },\n\n      error(err) {\n        store.isError = true;\n        store.redirect = false;\n        if (err.response) {\n          store.errorMsg = err.response.data.error;\n        }\n      },\n\n      setRedirect(value) {\n        store.redirect = value;\n      },\n\n      merge(data, schema) {\n        const { result, entities } = normalize(data, schema);\n\n        getRoot(store).entities.merge(entities);\n\n        return result;\n      },\n\n      run(...args) {\n        const promise = thunk(...args)(store, getParent(store), getRoot(store));\n\n        if (auto) {\n          return store._auto(promise);\n        }\n\n        return promise;\n      },\n\n      async _auto(promise) {\n        try {\n          store.start();\n          await promise;\n        } catch (err) {\n          console.log(err);\n          store.error(err);\n        } finally {\n          store.finish();\n        }\n      },\n    }));\n\n  return t.optional(model, {});\n}\n\nexport function createCollection(ofModel, asyncModels = {}) {\n  const collection = t\n    .model('CollectionModel', {\n      collection: t.map(ofModel),\n      ...asyncModels,\n    })\n    .views((store) => ({\n      get(key) {\n        return store.collection.get(String(key));\n      },\n    }))\n    .actions((store) => ({\n      add(key, value) {\n        store.collection.set(String(key), value);\n      },\n\n      remove(key, root) {\n        const item = store.collection.get(String(key));\n        root.remove(key);\n        destroy(item);\n      }\n    }));\n\n  return t.optional(collection, {});\n}\n\nexport function createPersist(store) {\n  const KEY = '_persist';\n\n  onSnapshot(store, (snapshot) => {\n    localStorage.setItem(\n      KEY,\n      JSON.stringify({\n        auth: { isLoggedIn: snapshot.auth.isLoggedIn },\n        viewer: { user: snapshot.viewer.user },\n      }),\n    );\n  });\n\n  function rehydrate() {\n    const snapshot = localStorage.getItem(KEY);\n\n    if (snapshot) {\n      applySnapshot(store, JSON.parse(snapshot));\n    }\n  }\n\n  return { rehydrate };\n}\n\nexport function editFiles(id, files, apiMethod) {\n  return async (flow, parent, root) => {\n    const post = parent.get(id);\n\n    root.files.upload.run(files).then(async () => {\n      const file = getSnapshot(root.files.items);\n\n      if (file[0]) {\n        post.setFiles(apiPath + file[0].filename);\n\n        await apiMethod({ id, files: apiPath + file[0].filename });\n      }\n    });\n  };\n}\n\nexport function deletePost(id, apiMethod) {\n  return async (flow) => {\n    await apiMethod(id);\n\n    window.location.reload();\n\n    flow.setRedirect(true);\n  };\n}\n\nexport function editPost(id, data, apiMethod) {\n  return async (flow, parent) => {\n    const post = parent.get(id);\n    const res = await apiMethod(id, data);\n\n    applySnapshot(post, res.data);\n\n    flow.setRedirect(true);\n  };\n}\n","import { types as t } from 'mobx-state-tree';\nimport { AsyncModel } from '../utils';\nimport * as Api from '../../api';\n\nexport const AuthStore = t.model('AuthStore', {\n  login: AsyncModel(loginFlow),\n  register: AsyncModel(registerFlow),\n  refreshToken: AsyncModel(refreshTokenFlow),\n  isLoggedIn: false,\n}).actions(store => ({\n  setIsLoggedIn(value) {\n    store.isLoggedIn = value;\n  },\n\n  logout() {\n    store.isLoggedIn = false;\n    Api.Auth.logout();\n  },\n}));\n\nfunction refreshTokenFlow({ refreshToken }) {\n  return async (flow, parent, root) => {\n    const res = await Api.Auth.refreshToken({ refreshToken });\n\n    Api.Auth.setTokens(res.data.accessToken, res.data.refreshToken);\n    root.auth.setIsLoggedIn(true);\n  };\n}\n\nfunction loginFlow({ username, password }) {\n  return async (flow, parent, root) => {\n    const res = await Api.Auth.login({ username, password });\n\n    if (res.data) {\n      Api.Auth.setTokens(res.data.accessToken, res.data.refreshToken);\n      root.viewer.setViewer(res.data.user);\n      root.auth.setIsLoggedIn(true);\n      flow.setRedirect(true);\n    }\n  };\n}\n\nfunction registerFlow({ fullName, username, email, password, passConfirm, isTeacher, cathedraId }) {\n  return async (flow, parent, root) => {\n    await Api.Auth.register({\n      fullName,\n      username,\n      email,\n      password,\n      passConfirm,\n      isTeacher,\n      cathedraId,\n    });\n\n    flow.setRedirect(true);\n  };\n}\n","import { types as t } from 'mobx-state-tree';\n\nexport const CathedraModel = t.model('CathedraModel', {\n  id: t.identifierNumber,\n  name: t.string,\n});\n","import { types as t } from 'mobx-state-tree';\n\nexport const PeriodicityModel = t\n  .model('PeriodicityModel', {\n    id: t.identifierNumber,\n    author: t.number,\n    subauthors: t.maybeNull(t.string),\n    udc: t.string,\n    title: t.string,\n    journal: t.string,\n    issueNumber: t.number,\n    journalPages: t.string,\n    pages: t.string,\n    annotations: t.maybeNull(t.string),\n    issn: t.maybeNull(t.string),\n    doi: t.maybeNull(t.string),\n    isScopusAndWS: false,\n    isScientometrics: false,\n    isProfessional: false,\n    isElectronic: false,\n    files: t.maybeNull(t.string),\n    createdAt: t.string,\n    updatedAt: t.string,\n\n    Users: t.optional(t.frozen(), []),\n  })\n  .actions((store) => ({\n    setFiles(value) {\n      store.files = value;\n    },\n  }));\n","import { types as t } from 'mobx-state-tree';\n\nexport const MonographModel = t\n  .model('MonographModel', {\n    id: t.identifierNumber,\n    author: t.number,\n    subauthors: t.maybeNull(t.string),\n    title: t.string,\n    section: t.string,\n    monographPages: t.string,\n    printPages: t.string,\n    pages: t.string,\n    year: t.number,\n    annotations: t.maybeNull(t.string),\n    isbn: t.maybeNull(t.string),\n    doi: t.maybeNull(t.string),\n    isEuLanguage: false,\n    files: t.maybeNull(t.string),\n    createdAt: t.string,\n    updatedAt: t.string,\n\n    Users: t.optional(t.frozen(), []),\n  })\n  .actions((store) => ({\n    setFiles(value) {\n      store.files = value;\n    },\n  }));\n","import { types as t } from 'mobx-state-tree';\n\nexport const ThesisModel = t\n  .model('ThesisModel', {\n    id: t.identifierNumber,\n    author: t.number,\n    subauthors: t.maybeNull(t.string),\n    udc: t.string,\n    title: t.string,\n    conference: t.string,\n    city: t.string,\n    dates: t.string,\n    collectionPages: t.string,\n    pages: t.string,\n    annotations: t.maybeNull(t.string),\n    issn: t.maybeNull(t.string),\n    doi: t.maybeNull(t.string),\n    isScopusAndWS: false,\n    isScientometrics: false,\n    isInternational: false,\n    files: t.maybeNull(t.string),\n    createdAt: t.string,\n    updatedAt: t.string,\n\n    Users: t.optional(t.frozen(), []),\n  })\n  .actions((store) => ({\n    setFiles(value) {\n      store.files = value;\n    },\n  }));\n","import { getRoot, types as t } from 'mobx-state-tree';\nimport { CathedraModel } from '../cathedras/CathedraModel';\nimport { PeriodicityModel } from '../posts/PeriodicityModel';\nimport { MonographModel } from '../posts/MonographModel';\nimport { ThesisModel } from '../posts/ThesisModel';\n\nexport const UserModel = t.model('UserModel', {\n  username: t.identifier,\n  id: t.number,\n  fullName: t.string,\n  email: t.maybe(t.string),\n  isTeacher: false,\n  isAdmin: false,\n  cathedraId: t.maybeNull(t.number),\n  createdAt: t.string,\n  updatedAt: t.string,\n  avatar: t.maybeNull(t.string),\n  bio: t.maybeNull(t.string),\n\n  Periodicities: t.optional(t.array(PeriodicityModel), []),\n  Monographs: t.optional(t.array(MonographModel), []),\n  Theses: t.optional(t.array(ThesisModel), []),\n\n  cathedra: t.maybeNull(\n    t.reference(CathedraModel, {\n      get(identifier, parent) {\n        if (identifier) {\n          return getRoot(parent).entities.cathedras.get(identifier) || identifier;\n        }\n\n        return null;\n      },\n\n      set(value) {\n        return value.id;\n      },\n    }),\n  ),\n\n  usernameString: t.string,\n})\n  .preProcessSnapshot(snapshot => {\n    if (snapshot) {\n      return {\n        ...snapshot,\n        cathedra: snapshot.cathedra || snapshot.cathedraId,\n        usernameString: snapshot.username,\n      };\n    }\n  });\n","import { types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { UserModel } from './UserModel';\nimport { AsyncModel } from '../utils';\n\nconst ViewerModel = UserModel.named('ViewerModel');\n\nexport const ViewerStore = t\n  .model('ViewerStore', {\n    user: t.maybe(ViewerModel),\n    userModel: t.maybe(UserModel),\n    edit: AsyncModel(edit),\n    changeAvatar: AsyncModel(changeAvatar),\n  })\n  .actions((store) => ({\n    setViewer(user) {\n      store.user = user;\n    },\n  }));\n\nfunction edit(data) {\n  return async (flow, parent) => {\n    const res = await Api.Users.edit(data);\n\n    parent.setViewer(res.data);\n    flow.setRedirect(true);\n  };\n}\n\nfunction changeAvatar(avatar) {\n  return async (flow, parent) => {\n    const res = await Api.Users.changeAvatar(avatar);\n\n    parent.setViewer(res.data);\n    flow.setRedirect(true);\n  };\n}\n","import { schema } from 'normalizr';\n\nexport const PeriodicityPost = new schema.Entity('periodicity');\nexport const ThesisPost = new schema.Entity('thesis');\nexport const MonographPost = new schema.Entity('monographs');\n\nexport const PeriodicityCollection = [PeriodicityPost];\nexport const ThesisCollection = [ThesisPost];\nexport const MonographCollection = [MonographPost];\n\nexport const User = new schema.Entity('users', {}, {\n  idAttribute: (entity) => entity.username,\n});\nexport const UserCollection = [User];\n\nexport const Cathedra = new schema.Entity('cathedras', {\n  // workers: User\n});\nexport const CathedraCollection = [Cathedra];\n","import { types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { CathedraModel } from './CathedraModel';\nimport { AsyncModel } from '../utils';\nimport { CathedraCollection } from '../schemas';\n\nexport const CathedrasStore = t\n  .model('CathedrasStore', {\n    items: t.array(t.reference(CathedraModel)),\n    fetchAll: AsyncModel(fetchAll),\n  })\n  .actions((store) => ({\n    setItems(value) {\n      store.items = value;\n    },\n  }));\n\nfunction fetchAll() {\n  return async (flow, parent) => {\n    const res = await Api.Cathedra.getAll();\n    const result = flow.merge(res.data, CathedraCollection);\n\n    parent.setItems(result);\n  };\n}\n","import * as Api from 'src/api';\nimport { UserModel } from './UserModel';\nimport { AsyncModel, createCollection } from '../utils';\nimport { useStore } from '../createStore';\nimport { User } from '../schemas';\nimport { applySnapshot, destroy, getRoot } from 'mobx-state-tree';\n\nexport function useUserCollection() {\n  const store = useStore();\n\n  return store.entities.users;\n}\n\nexport const usersCollection = createCollection(UserModel, {\n  getUser: AsyncModel(getUser),\n  edit: AsyncModel(edit),\n  deleteById: AsyncModel(deleteById),\n});\n\nfunction getUser(username) {\n  return async (flow, parent) => {\n    if (parent.get(username)) {\n      return parent.get(username);\n    } else {\n      const res = await Api.Users.getUser(username);\n\n      flow.merge(res.data, User);\n    }\n  };\n}\n\nfunction edit(data) {\n  return async (flow) => {\n    await Api.Users.edit(data);\n    window.location.reload();\n\n    flow.setRedirect(true);\n  };\n}\n\nfunction deleteById(id, username) {\n  return async (flow, parent) => {\n    await Api.Users.deleteById(id);\n\n    parent.remove(username, getRoot(parent).users);\n\n    flow.setRedirect(true);\n  };\n}\n\n","import * as Api from 'src/api';\nimport { CathedraModel } from './CathedraModel';\nimport { AsyncModel, createCollection } from '../utils';\nimport { useStore } from '../createStore';\nimport { Cathedra } from '../schemas';\n\nexport function useCathedrasCollection() {\n  const store = useStore();\n\n  return store.entities.cathedras;\n}\n\nexport const cathedrasCollection = createCollection(CathedraModel, {\n  getById: AsyncModel(getById),\n});\n\nfunction getById(id) {\n  return async (flow, parent) => {\n    const cathedra = parent.get(id);\n\n    if (cathedra) return cathedra;\n\n    if (!cathedra) {\n      const res = await Api.Cathedra.getById(id);\n\n      flow.merge(res.data, Cathedra);\n    }\n  };\n}\n\n","import * as Api from 'src/api';\nimport { AsyncModel, createCollection, deletePost, editFiles, editPost } from '../utils';\nimport { useStore } from '../createStore';\nimport { PeriodicityModel } from './PeriodicityModel';\nimport { PeriodicityPost } from '../schemas';\n\nexport function usePeriodicityCollection() {\n  const store = useStore();\n\n  return store.entities.periodicity;\n}\n\nexport const periodicityCollection = createCollection(PeriodicityModel, {\n  getById: AsyncModel(getById),\n  editFiles: AsyncModel(editFiles),\n  deleteById: AsyncModel(deletePost),\n  editPost: AsyncModel(editPost),\n});\n\nfunction getById(id) {\n  return async (flow, parent) => {\n    if (parent.get(id)) {\n      return parent.get(id);\n    } else {\n      const res = await Api.Posts.getPeriodicity(id);\n\n      flow.merge(res.data, PeriodicityPost);\n    }\n  };\n}\n","import * as Api from 'src/api';\nimport { AsyncModel, createCollection, deletePost, editFiles, editPost } from '../utils';\nimport { useStore } from '../createStore';\nimport { MonographPost } from '../schemas';\nimport { MonographModel } from './MonographModel';\n\nexport function useMonographsCollection() {\n  const store = useStore();\n\n  return store.entities.monographs;\n}\n\nexport const monographsCollection = createCollection(MonographModel, {\n  getById: AsyncModel(getById),\n  editFiles: AsyncModel(editFiles),\n  deleteById: AsyncModel(deletePost),\n  editPost: AsyncModel(editPost),\n});\n\nfunction getById(id) {\n  return async (flow, parent) => {\n    const post = parent.get(id);\n\n    if (post) return post;\n\n    if (!post) {\n      const res = await Api.Posts.getMonograph(id);\n\n      flow.merge(res.data, MonographPost);\n    }\n  };\n}\n","import * as Api from 'src/api';\nimport { AsyncModel, createCollection, deletePost, editFiles, editPost } from '../utils';\nimport { useStore } from '../createStore';\nimport { ThesisPost } from '../schemas';\nimport { ThesisModel } from './ThesisModel';\n\nexport function useThesisCollection() {\n  const store = useStore();\n\n  return store.entities.thesis;\n}\n\nexport const thesisCollection = createCollection(ThesisModel, {\n  getById: AsyncModel(getById),\n  editFiles: AsyncModel(editFiles),\n  deleteById: AsyncModel(deletePost),\n  editPost: AsyncModel(editPost),\n});\n\nfunction getById(id) {\n  return async (flow, parent) => {\n    const post = parent.get(id);\n\n    if (post) return post;\n\n    if (!post) {\n      const res = await Api.Posts.getThesis(id);\n\n      flow.merge(res.data, ThesisPost);\n    }\n  };\n}\n\n","import { types as t } from 'mobx-state-tree';\nimport { usersCollection } from './users/usersCollection';\nimport { cathedrasCollection } from './cathedras/cathedrasCollection';\nimport { periodicityCollection } from './posts/periodicityCollection';\nimport { monographsCollection } from './posts/monographsCollection';\nimport { thesisCollection } from './posts/thesisCollection';\n\nexport const EntitiesStore = t\n  .model('EntitiesStore', {\n    users: usersCollection,\n    cathedras: cathedrasCollection,\n    periodicity: periodicityCollection,\n    thesis: thesisCollection,\n    monographs: monographsCollection,\n  })\n  .actions((store) => ({\n    merge(entities) {\n      Object.keys(entities).forEach((collectionName) => {\n        const collectionEntities = entities[collectionName];\n\n        Object.keys(collectionEntities).forEach((id) => {\n          const value = collectionEntities[id];\n\n          store[collectionName].add(id, value);\n        });\n      });\n    },\n  }));\n","import { types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { AsyncModel } from '../utils';\n\nexport const FilesStore = t\n  .model('FilesStore', {\n    upload: AsyncModel(upload),\n    items: t.optional(t.array(t.frozen()), []),\n  })\n  .actions((store) => ({\n    setItems(value) {\n      store.items = value;\n    },\n\n    getItems() {\n      return store.items[0];\n    }\n  }));\n\nfunction upload(files) {\n  return async (flow, parent) => {\n    const data = new FormData();\n\n    [...files].forEach((file) => data.append(`files`, file));\n\n    const res = await Api.Files.upload(data);\n\n    parent.setItems(res.data);\n  };\n}\n","import { types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { UserModel } from './UserModel';\nimport { AsyncModel } from '../utils';\nimport { UserCollection } from '../schemas';\n\nexport const UsersStore = t\n  .model('CathedrasStore', {\n    items: t.array(t.reference(UserModel)),\n    fetchAll: AsyncModel(fetchAll),\n  })\n  .actions((store) => ({\n    setItems(value) {\n      store.items = value;\n    },\n\n    remove(key) {\n      store.items = store.items.filter(item => item.username !== key);\n    },\n  }));\n\nfunction fetchAll() {\n  return async (flow, parent) => {\n    const res = await Api.Users.getAll();\n    const result = flow.merge(res.data, UserCollection);\n\n    parent.setItems(result);\n  };\n};\n","import { types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { AsyncModel } from '../utils';\nimport { MonographModel } from './MonographModel';\nimport { PeriodicityModel } from './PeriodicityModel';\nimport { ThesisModel } from './ThesisModel';\nimport { MonographCollection, PeriodicityCollection, ThesisCollection } from '../schemas';\n\nexport const UserPostsStore = t\n  .model('UserPostsStore', {\n    periodic: t.array(t.reference(PeriodicityModel)),\n    thesis: t.array(t.reference(ThesisModel)),\n    monographs: t.array(t.reference(MonographModel)),\n\n    addPeriodic: AsyncModel(addPeriodic),\n    addThesis: AsyncModel(addThesis),\n    addMonograph: AsyncModel(addMonograph),\n\n    fetchUserPosts: AsyncModel(fetchUserPosts),\n  })\n  .actions((store) => ({\n    setItems(field, value) {\n      store[field] = value;\n    },\n\n    pushItem(field, value) {\n      store[field].push(value);\n    },\n  }));\n\nfunction fetchUserPosts(username) {\n  return async (flow, parent) => {\n    const res = await Api.Users.getUserPosts(username);\n\n    const { Periodicities, Monographs, Theses } = res.data;\n\n    const periodicityIds = flow.merge(Periodicities, PeriodicityCollection);\n    const monographsIds = flow.merge(Monographs, MonographCollection);\n    const thesisIds = flow.merge(Theses, ThesisCollection);\n\n    parent.setItems('periodic', periodicityIds);\n    parent.setItems('thesis', thesisIds);\n    parent.setItems('monographs', monographsIds);\n  };\n}\n\nfunction addPeriodic(data) {\n  return async (flow, parent) => {\n    const res = await Api.Posts.createPeriodicity(data);\n\n    parent.pushItem('periodic', res.data);\n  };\n}\n\nfunction addThesis(data) {\n  return async (flow, parent) => {\n    const res = await Api.Posts.createThesis(data);\n\n    parent.pushItem('thesis', res.data);\n  };\n}\n\nfunction addMonograph(data) {\n  return async (flow, parent) => {\n    const res = await Api.Posts.createMonograph(data);\n\n    parent.pushItem('monographs', res.data);\n  };\n}\n","import { flow, types as t } from 'mobx-state-tree';\n\nimport * as Api from 'src/api';\nimport { AuthStore } from './auth/AuthStore';\nimport { ViewerStore } from './users/ViewerStore';\nimport { CathedrasStore } from './cathedras/CathedrasStore';\nimport { getAccessToken, getRefreshToken } from '../api/utils';\nimport { EntitiesStore } from './EntitiesStore';\nimport { FilesStore } from './files/FilesStore';\nimport { UsersStore } from './users/UsersStore';\nimport { UserPostsStore } from './posts/UserPostsStore';\n\nexport const RootStore = t\n  .model('RootStore', {\n    auth: t.optional(AuthStore, {}),\n\n    viewer: t.optional(ViewerStore, {}),\n    users: t.optional(UsersStore, {}),\n    userPosts: t.optional(UserPostsStore, {}),\n\n    cathedras: t.optional(CathedrasStore, {}),\n\n    files: t.optional(FilesStore, {}),\n\n    entities: t.optional(EntitiesStore, {}),\n  })\n  .actions((store) => ({\n    bootstrap: flow(function* bootstrap() {\n      try {\n        const token = getAccessToken();\n        const refreshToken = getRefreshToken();\n\n        Api.Auth.setTokens(token, refreshToken);\n\n        if (token) {\n          store.auth.setIsLoggedIn(true);\n          const res = yield Api.Users.getMainUser();\n\n          store.viewer.setViewer(res.data);\n        } else {\n          store.auth.setIsLoggedIn(false);\n          store.viewer.setViewer(undefined);\n          Api.Auth.logout();\n        }\n      } catch (err) {\n        store.auth.setIsLoggedIn(false);\n        store.viewer.setViewer(undefined);\n        Api.Auth.logout();\n      }\n    }),\n  }));\n","import { createContext, useContext } from 'react';\nimport { onSnapshot } from 'mobx-state-tree';\n\nimport { RootStore } from './RootStore';\nimport { createPersist } from './utils';\n\nexport const createStore = () => {\n  const root = RootStore.create();\n\n  const persist = createPersist(root);\n  persist.rehydrate();\n\n  onSnapshot(root, (snapshot) => {\n    // console.log(JSON.stringify(snapshot.users, null, 2));\n  });\n\n  return root;\n};\n\nconst MSTContext = createContext(null);\n\nexport const Provider = MSTContext.Provider;\n\nexport const useStore = (mapStateToProps) => {\n  const store = useContext(MSTContext);\n\n  if (typeof mapStateToProps === 'function') {\n    return mapStateToProps(store);\n  }\n\n  return store;\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { Icon, Image } from 'semantic-ui-react';\n\nconst Avatar = ({ src }) => {\n  return (\n    <div>\n      {src ? <Image avatar src={src} /> : <Icon size='large' name=\"user circle\" />}\n    </div>\n  );\n};\n\nAvatar.propTypes = {\n  src: PropTypes.string.isRequired,\n};\n\nexport default Avatar;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Link, NavLink, generatePath, useHistory } from 'react-router-dom';\nimport { Container, Menu, Header as SemanticHeader, Dropdown } from 'semantic-ui-react';\n\nimport s from './Header.module.scss';\nimport { routes } from '../../scenes/routes';\nimport { colors } from '../App/App';\nimport { useStore } from '../../stores/createStore';\nimport Avatar from '../elements/Avatar/Avatar';\n\nconst Header = () => {\n  const history = useHistory();\n  const store = useStore();\n  const { isLoggedIn } = store.auth;\n  const { avatar } = isLoggedIn && store.viewer.user;\n  const pathToAccount = isLoggedIn && generatePath(routes.account, {\n    username: store.viewer.user.username,\n  });\n\n  const handleSignOut = () => {\n    store.auth.logout();\n    history.push(routes.home);\n  };\n\n  return (\n    <Container fluid>\n      <Menu size=\"large\" color={colors.main} inverted attached>\n        <Menu.Item>\n          <SemanticHeader as=\"h1\">\n            <Link to={routes.home} className={s.logo}>\n              SciWorks\n            </Link>\n          </SemanticHeader>\n        </Menu.Item>\n\n        <Menu.Menu position=\"right\">\n          {isLoggedIn && (\n            <Dropdown item trigger={<Avatar src={avatar} />}>\n              <Dropdown.Menu>\n                <Dropdown.Item icon=\"user\" as={Link} to={pathToAccount} text=\"Profile\" />\n                <Dropdown.Item icon=\"add\" as={Link} to={routes.createPost} text=\"New post\" />\n                <Dropdown.Item icon=\"cog\" as={Link} to={routes.adminPanel} text=\"Admin panel\" />\n                <Dropdown.Divider />\n                <Dropdown.Item icon=\"sign out\" text=\"Sign out\" onClick={handleSignOut} />\n              </Dropdown.Menu>\n            </Dropdown>\n          )}\n          {!isLoggedIn && (\n            <Menu.Item>\n              <NavLink to={routes.login} activeClassName={s.nav_active} className={s.nav}>\n                Sign In\n              </NavLink>\n            </Menu.Item>\n          )}\n        </Menu.Menu>\n      </Menu>\n    </Container>\n  );\n};\n\nexport default observer(Header);\n","import React from 'react';\n\n// import s from './Home.module.scss';\n\nconst Home = () => {\n  return (\n    <div>\n      Home\n    </div>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Label } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nconst Error = ({ children }) => {\n  return (\n    <Label basic color=\"red\" pointing>\n      {children}\n    </Label>\n  );\n};\n\nError.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Error;\n","import React, { Fragment, useState } from 'react';\nimport { Form, Input, Icon, Button, Checkbox, TextArea } from 'semantic-ui-react';\nimport { useField } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport Error from '../Error/Error';\n\nconst Field = ({ children, label, required = false, type = 'text', ...props }) => {\n  const [show, setShow] = useState(false);\n  const [field, meta] = useField(props);\n\n  const isPassword = type === 'password';\n  const isCheckbox = type === 'checkbox';\n  const isTextarea = type === 'textarea';\n  const passwordFieldType = isPassword && show ? 'text' : 'password';\n  const fieldType = isPassword ? passwordFieldType : type;\n\n  const showPassword = () => setShow(!show);\n\n  const checkbox = (\n    <Checkbox label={label} type=\"checkbox\" checked={meta.value} {...props} {...field} />\n  );\n\n  const textarea = (\n    <Fragment>\n      <label>{label}</label>\n      <TextArea\n        style={{minHeight: '300px'}}\n        value={meta.value}\n        {...field}\n        {...props}\n      />\n    </Fragment>\n  );\n\n  const others = (\n    <Fragment>\n      <label>{label}</label>\n      <Input icon>\n        <input type={fieldType} {...props} {...field} value={meta.value} />\n        {isPassword && (\n          <Button type=\"button\" icon onClick={showPassword}>\n            <Icon name={show ? 'eye' : 'eye slash'} />\n          </Button>\n        )}\n      </Input>\n    </Fragment>\n  );\n\n  return (\n    <Form.Field required={required} error={meta.touched && meta.error && true}>\n      {isCheckbox && checkbox}\n      {isTextarea && textarea}\n      {!isCheckbox && !isTextarea && others}\n\n      {meta.touched && meta.error && meta.error !== 'Please enter a value' && (\n        <Error>{meta.error}</Error>\n      )}\n      {}\n    </Form.Field>\n  );\n};\n\nField.propTypes = {\n  label: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n  required: PropTypes.bool,\n  type: PropTypes.string,\n};\n\nexport default Field;\n","import React from 'react';\nimport { Message } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nconst ErrorMessage = ({ errors, header = \"Something went wrong\", ...props }) => {\n  return (\n    <Message\n      error\n      header={header}\n      content={errors.map((error) => (\n        <span>\n          {error.msg}\n          <br />\n        </span>\n      ))}\n      {...props}\n    />\n  );\n};\n\nErrorMessage.propTypes = {\n  errors: PropTypes.array.isRequired,\n  header: PropTypes.string,\n};\n\nexport default ErrorMessage;\n","import React, { useState } from 'react';\nimport { Select } from 'semantic-react';\nimport { Form } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport './SelectField.scss';\nimport Error from '../Error/Error';\n\nconst SelectField = ({\n  setFieldValue,\n  children,\n  required = false,\n  name,\n  label,\n  defaultValue,\n  formik = true,\n  multiple = false,\n  getValue,\n  error = null,\n  ...props\n}) => {\n  const [active, setActive] = useState(false);\n  const [searchString, setSearchString] = useState('');\n  const [selected, setSelected] = useState(defaultValue || []);\n\n  return (\n    <Form.Field required={required}>\n      <label>{label}</label>\n      <Select\n        active={active}\n        search\n        selection\n        selected={selected}\n        onSelectChange={(val) => {\n          setSelected(val);\n          setActive(false);\n          if (formik) {\n            setFieldValue(name, multiple ? val : val[0]);\n          } else {\n            getValue(val);\n          }\n        }}\n        onClick={() => setActive(!active)}\n        onRequestClose={() => setActive(false)}\n        className=\"select\"\n        style={active ? { '--display': 'block' } : { '--display': 'none' }}\n        onSearchStringChange={(search) => setSearchString(search)}\n        searchString={searchString}\n        name={name}\n        multiple={multiple}\n        {...props}\n      >\n        {children}\n      </Select>\n\n      {error && <Error>{error}</Error>}\n    </Form.Field>\n  );\n};\n\nSelectField.propTypes = {\n  setFieldValue: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  required: PropTypes.bool,\n  name: PropTypes.string,\n  label: PropTypes.node,\n  defaultValue: PropTypes.array,\n  formik: PropTypes.bool,\n  multiple: PropTypes.bool,\n  getValue: PropTypes.func,\n  error: PropTypes.node,\n};\n\nexport default SelectField;\n","import React, { useEffect } from 'react';\nimport { Option } from 'semantic-react';\nimport PropTypes from 'prop-types';\n\nimport SelectField from '../SelectField/SelectField';\nimport Field from '../Field/Field';\nimport { useStore } from '../../../stores/createStore';\nimport { observer } from 'mobx-react';\n\nconst CathedrasSelect = ({ isTeacher = false, setFieldValue, error, ...props }) => {\n  const store = useStore();\n  const { items, fetchAll } = store.cathedras;\n\n  useEffect(() => {\n    fetchAll.run();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Field onClick={(e, props) => !props.checked && setFieldValue('cathedraId', null)} type=\"checkbox\" label=\"I am professor\" id=\"isTeacher\" name=\"isTeacher\" />\n\n      <SelectField\n        label='Your cathedra'\n        name=\"cathedraId\"\n        placeholder=\"Select cathedra\"\n        required={isTeacher}\n        disabled={!isTeacher}\n        setFieldValue={setFieldValue}\n        error={error}\n        loading={fetchAll.isLoading}\n        {...props}\n      >\n        {items.map(({ name, id }) => (\n          <Option key={id} value={id}>\n            {name}\n          </Option>\n        ))}\n      </SelectField>\n    </React.Fragment>\n  );\n};\n\nCathedrasSelect.propTypes = {\n  items: PropTypes.array.isRequired,\n  isTeacher: PropTypes.bool,\n  setFieldValue: PropTypes.func.isRequired,\n};\n\nexport default observer(CathedrasSelect);\n","import React, { useEffect } from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport Field from 'src/components/Form/Field/Field';\nimport Error from 'src/components/Form/Error/Error';\nimport { colors } from 'src/components/App/App';\nimport { useStore } from '../../../../stores/createStore';\nimport ErrorMessage from '../../../../components/Messages/ErrorMessage';\nimport CathedrasSelect from '../../../../components/Form/CathedrasSelect/CathedrasSelect';\n\nconst RegisterForm = ({ onSubmit }) => {\n  const store = useStore();\n  const { items } = store.cathedras;\n  const { isLoading, isError, errorMsg } = store.auth.register;\n\n  useEffect(() => {\n    store.cathedras.fetchAll.run();\n  }, []);\n\n  const formikProps = {\n    initialValues: {\n      fullName: '',\n      username: '',\n      email: '',\n      password: '',\n      passConfirm: '',\n      isTeacher: false,\n      cathedraId: null,\n    },\n\n    validationSchema: Yup.object().shape({\n      fullName: Yup.string()\n        .min(3, 'Must be at least 3 characters')\n        .max(255, 'Must be shorter than 255')\n        .required('Please enter a value'),\n      username: Yup.string()\n        .min(4, 'Must be at least 4 characters')\n        .max(255, 'Must be shorter than 255')\n        .required('Please enter a value'),\n      email: Yup.string()\n        .email('Must be a valid email address')\n        .max(255, 'Must be shorter than 255')\n        .required('Please enter a value'),\n      password: Yup.string()\n        .min(6, 'Must have minimum 6 characters')\n        .required('Please enter a value'),\n      passConfirm: Yup.string().required('Please enter a value'),\n      isTeacher: Yup.boolean(),\n      cathedraId: Yup.number().when('isTeacher', {\n        is: true,\n        then: Yup.number().required('Please select something').nullable(),\n        otherwise: Yup.number().nullable()\n      })\n    }),\n\n    onSubmit,\n  };\n\n  return (\n    <Formik {...formikProps}>\n      {({ values, handleSubmit, setFieldValue, errors }) => {\n        const isMatch = values.password === values.passConfirm;\n\n        return (\n          <Form\n            error={isError}\n            loading={isLoading}\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"attached grey segment\"\n          >\n            {isError && <ErrorMessage errors={errorMsg} />}\n\n            <Field label=\"Full name\" name=\"fullName\" placeholder=\"Bruce Wayne\" />\n            <Field label=\"Username\" name=\"username\" placeholder=\"Batman\" required />\n            <Field\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"something@example.com\"\n              required\n            />\n            <Field\n              label=\"Password\"\n              name=\"password\"\n              type=\"password\"\n              placeholder=\"Password\"\n              required\n            />\n            <Field\n              label=\"Repeat password\"\n              name=\"passConfirm\"\n              type=\"password\"\n              placeholder=\"Repeat password\"\n              required\n            >\n              {!isMatch && <Error>Passwords don't match</Error>}\n            </Field>\n\n            <CathedrasSelect\n              isTeacher={values.isTeacher}\n              setFieldValue={setFieldValue}\n              items={items}\n              error={errors.cathedraId}\n            />\n\n            <Button type=\"submit\" size=\"large\" color={colors.main}>\n              Register\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nRegisterForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default observer(RegisterForm);\n","import React from 'react';\nimport { Container, Icon, Message } from 'semantic-ui-react';\nimport { Link, Redirect } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport RegisterForm from './components/RegisterForm';\nimport { routes } from '../../routes';\nimport { useStore } from '../../../stores/createStore';\nimport s from './Register.module.scss';\n\nconst Register = () => {\n  const store = useStore();\n  const { redirect } = store.auth.register;\n\n  const onSubmit = async ({ fullName, username, email, password, passConfirm, isTeacher, cathedraId }) => {\n    await store.auth.register.run({ fullName, username, email, password, passConfirm, isTeacher, cathedraId });\n  };\n\n  if (redirect) return <Redirect to={routes.login} />;\n\n  return (\n    <Container>\n      <div className={s.form}>\n        <Message\n          attached\n          header=\"Welcome to our site!\"\n          content=\"Fill out the form below to sign-up for a new account\"\n        />\n        <RegisterForm onSubmit={onSubmit} />\n        <Message attached=\"bottom\" warning>\n          <Icon name=\"help\" />\n          Already signed up?&nbsp;<Link to={routes.login}>Login here</Link>&nbsp;instead.\n        </Message>\n      </div>\n    </Container>\n  );\n};\n\nexport default observer(Register);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Form, Message } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport Field from 'src/components/Form/Field/Field';\nimport { colors } from 'src/components/App/App';\nimport { useStore } from '../../../../stores/createStore';\n\nconst LoginForm = ({ onSubmit }) => {\n  const store = useStore();\n  const { errorMsg, isError, isLoading } = store.auth.login;\n\n  const formikProps = {\n    initialValues: {\n      username: '',\n      password: '',\n    },\n\n    validationSchema: Yup.object().shape({\n      username: Yup.string().max(255, 'Must be shorter than 255').required(' '),\n      password: Yup.string().required(' '),\n    }),\n\n    onSubmit,\n  };\n\n  return (\n    <Formik {...formikProps}>\n      {({ handleSubmit }) => {\n        return (\n          <Form\n            error={isError}\n            loading={isLoading}\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"attached grey segment\"\n          >\n            {<Message error header=\"Log in failed\" content={errorMsg} />}\n\n            <Field label=\"Username\" name=\"username\" placeholder=\"Batman\" />\n            <Field label=\"Password\" name=\"password\" type=\"password\" placeholder=\"Password\" />\n\n            <Button type=\"submit\" size=\"large\" color={colors.main}>\n              Login\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nLoginForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default observer(LoginForm);\n","import React from 'react';\nimport { Link, generatePath, Redirect } from 'react-router-dom';\nimport { Container, Icon, Message } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\n\nimport LoginForm from './components/LoginForm';\nimport { routes } from '../../routes';\nimport { useStore } from '../../../stores/createStore';\n\nimport s from './Login.module.scss';\n\nconst Login = () => {\n  const store = useStore();\n  const { redirect } = store.auth.login;\n\n  const onSubmit = async ({ username, password }) => {\n    await store.auth.login.run({ username, password });\n  };\n\n  if (redirect) {\n    return <Redirect to={generatePath(routes.account, { username: store.viewer.user.username })} />;\n  }\n\n  return (\n    <Container>\n      <div className={s.form}>\n        <Message attached header=\"Hello!\" content=\"Login to see more\" />\n        <LoginForm onSubmit={onSubmit} />\n        <Message attached=\"bottom\" warning>\n          <Icon name=\"help\" />\n          No account yet?&nbsp;<Link to={routes.register}>Register here</Link>&nbsp;.\n        </Message>\n      </div>\n    </Container>\n  );\n};\n\nexport default observer(Login);\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport { routes } from '../routes';\nimport Register from './Register/Register';\nimport Login from './Login/Login';\n\nconst Auth = () => {\n  return (\n    <div>\n      <Switch>\n        <Route path={routes.register} component={Register} />\n        <Route path={routes.login} component={Login} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Auth;\n","import React from 'react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport Field from '../Form/Field/Field';\nimport { useStore } from '../../stores/createStore';\nimport ErrorMessage from '../Messages/ErrorMessage';\nimport CathedrasSelect from '../Form/CathedrasSelect/CathedrasSelect';\nimport { useUserCollection } from '../../stores/users/usersCollection';\n\nconst EditForm = ({ user, cancelEdit, isViewer = true }) => {\n  const store = useStore();\n  const { edit } = useUserCollection();\n  const { fullName, username, email, isTeacher, cathedraId, id, bio } = user;\n  const { isLoading, isError, errorMsg } = store.viewer.edit;\n\n  const onSubmit = (data) => {\n    if (isViewer) {\n      store.viewer.edit.run(data);\n    } else {\n      edit.run(data);\n    }\n  };\n\n  const formikProps = {\n    initialValues: {\n      id,\n\n      // --- values to change\n      fullName,\n      username,\n      email,\n      isTeacher,\n      cathedraId,\n      bio,\n      // ---\n\n      currentUsername: username,\n      currentEmail: email,\n    },\n\n    validationSchema: Yup.object().shape({\n      fullName: Yup.string()\n        .min(3, 'Must be at least 3 characters')\n        .max(255, 'Must be shorter than 255')\n        .nullable(),\n      username: Yup.string()\n        .min(4, 'Must be at least 4 characters')\n        .max(255, 'Must be shorter than 255')\n        .required('Please enter a value'),\n      email: Yup.string()\n        .email('Must be a valid email address')\n        .max(255, 'Must be shorter than 255')\n        .required('Please enter a value'),\n      bio: Yup.string().nullable(),\n      isTeacher: Yup.boolean(),\n      cathedraId: Yup.number().when('isTeacher', {\n        is: true,\n        then: Yup.number().required('Please select something').nullable(),\n        otherwise: Yup.number().nullable()\n      })\n    }),\n\n    onSubmit,\n  };\n\n  return (\n    <Formik {...formikProps}>\n      {({ handleSubmit, setFieldValue, values, errors }) => {\n        return (\n          <Form noValidate onSubmit={handleSubmit} error={isError} loading={isLoading}>\n            {isError && <ErrorMessage errors={errorMsg} />}\n\n            <Field label=\"Full name\" name=\"fullName\" placeholder=\"Bruce Wayne\" />\n            <Field label=\"Username\" name=\"username\" placeholder=\"Batman\" required />\n            <Field\n              label=\"Email\"\n              name=\"email\"\n              type=\"email\"\n              placeholder=\"something@example.com\"\n              required\n            />\n\n            <CathedrasSelect\n              isTeacher={values.isTeacher}\n              setFieldValue={setFieldValue}\n              defaultValue={[cathedraId]}\n              error={errors.cathedraId}\n            />\n\n            <Field\n              type=\"textarea\"\n              name=\"bio\"\n              label=\"Tell about yourself\"\n              placeholder=\"Tell us about yourself\"\n            />\n\n            <Button.Group attached>\n              <Button onClick={cancelEdit}>Cancel</Button>\n              <Button.Or />\n              <Button type=\"submit\" positive>\n                Save\n              </Button>\n            </Button.Group>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nEditForm.propTypes = {\n  user: PropTypes.object.isRequired,\n  cancelEdit: PropTypes.func.isRequired,\n};\n\nexport default observer(EditForm);\n","import React, { useEffect, useState } from 'react';\nimport { generatePath, Link } from 'react-router-dom';\nimport { Button, Image } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport NoneImage from 'src/img/none.svg';\nimport { useStore } from '../../../../stores/createStore';\nimport { routes } from '../../../routes';\nimport { useCathedrasCollection } from '../../../../stores/cathedras/cathedrasCollection';\nimport { apiPath, colors } from '../../../../components/App/App';\n\nimport s from './User.module.scss';\nimport EditForm from '../../../../components/EditForm/EditForm';\n\nconst User = ({ user, isViewer }) => {\n  const [image, setImage] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const addImageRef = React.createRef();\n\n  // ---- values from store\n  const store = useStore();\n  const { avatar, fullName, username, email, cathedraId, cathedra, bio } = user;\n  const cathedraCollection = useCathedrasCollection();\n  const pathToCathedra =\n    cathedra && generatePath(routes.cathedra, { cathedraName: cathedra.name || 0 });\n  // -----\n\n  useEffect(() => {\n    cathedraCollection.getById.run(cathedraId);\n  }, [cathedraId]);\n\n  const handleFileChange = (e) => {\n    store.files.upload.run(e.target.files).then(() => setImage(store.files?.items[0]?.filename));\n  };\n\n  // ---- avatar upload\n  const handleCancelAvatarUpload = () => setImage(null);\n  const handleAvatarUpload = () => {\n    store.viewer.changeAvatar.run({ avatar: apiPath + image });\n    setImage(null);\n  };\n  // -----\n\n  // ----- edit mode\n  const closeEditMode = () => setEditMode(false);\n  const openEditMode = () => setEditMode(true);\n  // -----\n\n  return (\n    <React.Fragment>\n      <div className={s.user}>\n        <div className={s.img}>\n          <Image src={(image && apiPath + image) || avatar || NoneImage} fluid />\n          { isViewer && <div>\n            {!image ? (\n              <Button\n                icon=\"add\"\n                content=\"New avatar\"\n                color={colors.second}\n                labelPosition=\"left\"\n                fluid\n                attached\n                onClick={() => addImageRef.current.click()}\n              />\n            ) : (\n              <Button.Group fluid attached>\n                <Button onClick={handleCancelAvatarUpload}>Cancel</Button>\n                <Button.Or />\n                <Button onClick={handleAvatarUpload} positive>\n                  Save\n                </Button>\n              </Button.Group>\n            )}\n            <input\n              onChange={handleFileChange}\n              ref={addImageRef}\n              type=\"file\"\n              name=\"files\"\n              className=\"none\"\n            />\n\n            <div className={s.edit_button}>\n              <Button\n                icon=\"edit\"\n                content=\"Edit profile\"\n                color={colors.neutral}\n                labelPosition=\"left\"\n                onClick={openEditMode}\n                fluid\n                attached\n              />\n            </div>\n          </div> }\n        </div>\n        <div className={s.user__info}>\n          {!editMode && (\n            <React.Fragment>\n              <h1>{fullName}</h1>\n              <h4>{username}</h4>\n              <div>\n                <a href={`mailto: ${email}`}>{email}</a>\n              </div>\n              <p className={s.bio}>{bio}</p>\n              {cathedra && (\n                <Link to={pathToCathedra} className={s.link}>\n                  {cathedra.name}\n                </Link>\n              )}\n            </React.Fragment>\n          )}\n\n          {editMode && isViewer && <EditForm user={store.viewer.user} cancelEdit={closeEditMode} />}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nUser.propTypes = {\n  user: PropTypes.object.isRequired,\n  isViewer: PropTypes.bool.isRequired,\n};\n\nexport default observer(User);\n","import React from 'react';\nimport { Button, Header, Icon, Item, Label } from 'semantic-ui-react';\nimport { Link, generatePath } from 'react-router-dom';\n\nimport { routes } from '../../../routes';\nimport { colors } from '../../../../components/App/App';\nimport { observer } from 'mobx-react';\n\nimport s from './PostsBlock.module.scss';\n\nconst PostsBlock = ({ items, path }) => {\n  if (items.length <= 0) {\n    return (\n      <Header as=\"h4\" icon textAlign=\"center\">\n        <Icon name=\"x\" />\n        No posts\n      </Header>\n    );\n  }\n\n  return (\n    <div>\n      <Item.Group divided>\n        {items.map((post) => {\n          const created = new Date(post.createdAt);\n\n          return (\n            <Item key={post.id} className={s.item}>\n              <Item.Content>\n                <Item.Header as={Link} to={generatePath(path, { id: post.id })}>\n                  {post.title}\n                </Item.Header>\n                <Item.Meta>\n                  <div className={s.date}>\n                    <div>{created.toLocaleDateString()}</div>\n                  </div>\n\n                  <Label.Group size='small' className={s.tags} tag>\n                    {post.isElectronic && <Label>Electronic</Label>}\n                    {post.isEuLanguage && <Label>European language</Label>}\n                    {post.isScopusAndWS && <Label>Scopus and Web of Science</Label>}\n                    {post.isScientometrics && <Label>Scientometric databases</Label>}\n                    {post.isProfessional && <Label>Professional</Label>}\n                    {post.isInternational && <Label>International conference</Label>}\n                  </Label.Group>\n\n                  {post.Users.map(({ id, username }) => (\n                    <Link\n                      className={id !== post.author ? s.subauthor : s.mainAuthor}\n                      to={generatePath(routes.account, { username })}\n                      key={id}\n                    >\n                      {username}\n                    </Link>\n                  ))}\n                </Item.Meta>\n                <Item.Description className={s.desc}>\n                  {post.annotations}\n                </Item.Description>\n                <Item.Extra>\n                  <Button\n                    color={colors.main}\n                    as={Link}\n                    to={generatePath(path, { id: post.id })}\n                    floated=\"right\"\n                  >\n                    See more\n                    <Icon name=\"right chevron\" />\n                  </Button>\n                </Item.Extra>\n              </Item.Content>\n            </Item>\n          );\n        })}\n      </Item.Group>\n    </div>\n  );\n};\n\nexport default observer(PostsBlock);\n","import React, { useEffect } from 'react';\nimport { generatePath, NavLink, Redirect, Route, useParams } from 'react-router-dom';\nimport { Container, Header, Menu, Segment } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\n\nimport s from './Account.module.scss';\nimport { useStore } from '../../stores/createStore';\nimport { useUserCollection } from '../../stores/users/usersCollection';\nimport { routes } from '../routes';\nimport User from './components/User/User';\nimport PostsBlock from './components/PostsBlock/PostsBlock';\n\nconst Account = () => {\n  const params = useParams();\n\n  const store = useStore();\n  const isViewer = store.viewer?.user?.username === params.username;\n  const { collection, getUser } = useUserCollection();\n  const user = isViewer ? store.viewer.user : collection.get(params.username);\n  const { fetchUserPosts, periodic, thesis, monographs } = store.userPosts;\n  const postsLoaded = !fetchUserPosts.isLoading && !fetchUserPosts.isError;\n\n  useEffect(() => {\n    if (params.username !== store.viewer.user.username) {\n      getUser.run(params.username);\n    }\n\n    fetchUserPosts.run(params.username);\n  }, [params.username]);\n\n  if (store.viewer.edit.redirect) {\n    return <Redirect to={generatePath(routes.account, { username: store.viewer.user.username })} />;\n  }\n\n  return (\n    <div className={s.container}>\n      <Container>\n        <Segment padded loading={getUser.isLoading}>\n          {!user && <Header as='h3' textAlign='center'>No user found</Header>}\n          {user && <User user={user} isViewer={isViewer} />}\n        </Segment>\n\n        {user && (\n          <Segment padded>\n            <Menu widths={3}>\n              <Menu.Item\n                name=\"Monographs\"\n                as={NavLink}\n                to={generatePath(routes.monographs, { username: user.username })}\n              />\n              <Menu.Item\n                name=\"Periodicity\"\n                as={NavLink}\n                to={generatePath(routes.periodicity, { username: user.username })}\n              />\n              <Menu.Item\n                name=\"Thesis\"\n                as={NavLink}\n                to={generatePath(routes.thesis, { username: user.username })}\n              />\n            </Menu>\n\n            <Route\n              path={routes.periodicity}\n              render={() =>\n                postsLoaded && <PostsBlock items={periodic} path={routes.periodicityPost} />\n              }\n            />\n            <Route\n              path={routes.monographs}\n              render={() =>\n                postsLoaded && <PostsBlock items={monographs} path={routes.monographPost} />\n              }\n            />\n            <Route\n              path={routes.thesis}\n              render={() => postsLoaded && <PostsBlock items={thesis} path={routes.thesisPost} />}\n            />\n          </Segment>\n        )}\n      </Container>\n    </div>\n  );\n};\n\nexport default observer(Account);\n","import React, { useEffect } from 'react';\nimport { Option } from 'semantic-react';\nimport PropTypes from 'prop-types';\nimport { observer } from 'mobx-react';\n\nimport SelectField from '../SelectField/SelectField';\nimport { useStore } from '../../../stores/createStore';\n\nimport s from './UsersSelect.module.scss';\n\nconst UsersSelect = ({ setFieldValue, error, multiple = true, ...props }) => {\n  const store = useStore();\n  const { fetchAll, items } = store.users;\n\n  useEffect(() => {\n    fetchAll.run();\n  }, []);\n\n  return (\n    <SelectField\n      oneValue={false}\n      required\n      multiple={multiple}\n      loading={fetchAll.isLoading}\n      setFieldValue={setFieldValue}\n      error={error}\n      {...props}\n    >\n      {items.map(({ username, fullName, id }) => (\n        <Option key={id} value={id}>\n          {username} <span className={s.light_text}>({fullName})</span>\n        </Option>\n      ))}\n    </SelectField>\n  );\n};\n\nUsersSelect.propTypes = {\n  setFieldValue: PropTypes.func.isRequired,\n  error: PropTypes.node,\n};\n\nexport default observer(UsersSelect);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Form } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport { useStore } from '../../stores/createStore';\nimport { colors } from '../App/App';\nimport UsersSelect from '../Form/UsersSelect/UsersSelect';\nimport Field from '../Form/Field/Field';\nimport SelectField from '../Form/SelectField/SelectField';\n\nconst MonographForm = ({ onSubmit, editMode = false, isAdmin, post = {} }) => {\n  const subauthors = post.subauthors ? post.subauthors.split(',').map((item) => +item) : null;\n\n  const formikProps = {\n    initialValues: {\n      title: post?.title || '',\n      section: post?.section || null,\n      monographPages: post?.monographPages || '',\n      printPages: post?.printPages || '',\n      pages: post?.pages || '',\n      year: post?.year || '',\n      annotations: post?.annotations || null,\n      isbn: post?.isbn || null,\n      doi: post?.doi || null,\n      isEuLanguage: post?.isEuLanguage || false,\n      files: post?.files || null,\n      author: post?.author || null,\n      subauthors: post?.subauthors || null,\n    },\n\n    validationSchema: Yup.object().shape({}),\n\n    onSubmit,\n  };\n\n  const store = useStore();\n  const { isLoading, isError } = store.userPosts.addMonograph;\n\n  return (\n    <Formik {...formikProps}>\n      {({ handleSubmit, setFieldValue }) => {\n        return (\n          <Form\n            error={isError}\n            loading={isLoading}\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"attached\"\n          >\n            {/*{<Message error header=\"Log in failed\" content={errorMsg} />}*/}\n\n            {isAdmin && (\n              <UsersSelect\n                name=\"author\"\n                setFieldValue={setFieldValue}\n                label=\"Select author\"\n                placeholder=\"Select author\"\n                multiple={false}\n              />\n            )}\n            <UsersSelect\n              name=\"subauthors\"\n              setFieldValue={setFieldValue}\n              defaultValue={subauthors}\n              label=\"Select subauthors\"\n              placeholder=\"Select subauthors\"\n            />\n\n            <Field required label=\"Title\" name=\"title\" placeholder=\"Monograph title\" />\n            <Field label=\"Section\" name=\"section\" placeholder=\"Section name\" />\n            <Form.Group widths={2}>\n              <Field label=\"ISBN\" name=\"isbn\" placeholder=\"978-1-10-769989-2\" />\n              <Field label=\"DOI\" name=\"doi\" placeholder=\"10.15421/abc1234567890\" />\n            </Form.Group>\n            <Form.Group widths={4}>\n              <Field required label=\"Monograph pages\" name=\"monographPages\" placeholder=\"0\" />\n              <Field required label=\"Print pages\" name=\"printPages\" placeholder=\"0\" />\n              <Field required label=\"Pages\" name=\"pages\" placeholder=\"0\" />\n              <Field required label=\"Year\" name=\"year\" placeholder=\"2015\" />\n            </Form.Group>\n            <Field type=\"textarea\" label=\"Annotation\" name=\"annotations\" placeholder=\"...\" />\n            <Field\n              type=\"checkbox\"\n              label=\"European Union language\"\n              name=\"isEuLanguage\"\n              id=\"isEuLanguage\"\n            />\n\n            <Button type=\"submit\" color={colors.main}>\n              {editMode ? 'Update' : 'Create'}\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nMonographForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  editMode: PropTypes.bool,\n  post: PropTypes.object,\n  isAdmin: PropTypes.bool.isRequired,\n};\n\nexport default observer(MonographForm);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Button, Form } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\nimport { useStore } from '../../stores/createStore';\nimport { colors } from '../App/App';\nimport UsersSelect from '../Form/UsersSelect/UsersSelect';\nimport Field from '../Form/Field/Field';\n\nconst PeriodicityForm = ({ onSubmit, editMode = false, isAdmin, post = {} }) => {\n  const subauthors = post.subauthors ? post.subauthors.split(',').map((item) => +item) : null;\n\n  const formikProps = {\n    initialValues: {\n      title: post?.title || '',\n      udc: post?.udc || '',\n      journal: post?.journal || '',\n      issueNumber: post?.issueNumber || '',\n      journalPages: post?.journalPages || '',\n      pages: post?.pages || '',\n      issn: post?.issn || null,\n      doi: post?.doi || null,\n      annotations: post?.annotations || null,\n      isScopusAndWS: post?.isScopusAndWS || false,\n      isScientometrics: post?.isScientometrics || false,\n      isProfessional: post?.isProfessional || false,\n      isElectronic: post?.isElectronic || false,\n      files: post?.files || null,\n      author: post?.author || null,\n      subauthors: subauthors || null,\n    },\n\n    validationSchema: Yup.object().shape({}),\n\n    onSubmit,\n  };\n\n  const store = useStore();\n  const { isLoading, isError } = store.userPosts.addPeriodic;\n\n  return (\n    <Formik {...formikProps}>\n      {({ handleSubmit, setFieldValue }) => {\n        return (\n          <Form\n            error={isError}\n            loading={isLoading}\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"attached\"\n          >\n            {/*{<Message error header=\"Log in failed\" content={errorMsg} />}*/}\n\n            {isAdmin && (\n              <UsersSelect\n                name=\"author\"\n                setFieldValue={setFieldValue}\n                label=\"Select author\"\n                placeholder=\"Select author\"\n                multiple={false}\n              />\n            )}\n            <UsersSelect\n              name=\"subauthors\"\n              setFieldValue={setFieldValue}\n              defaultValue={subauthors}\n              label=\"Select subauthors\"\n              placeholder=\"Select subauthors\"\n            />\n\n            <Field required label=\"Title\" name=\"title\" placeholder=\"Periodicity title\" />\n            <Field\n              required\n              label=\"Journal\"\n              name=\"journal\"\n              placeholder=\"American Economic Journal\"\n            />\n            <Form.Group widths={3}>\n              <Field required label=\"Issue number\" name=\"issueNumber\" placeholder=\"34\" />\n              <Field required label=\"Journal pages\" name=\"journalPages\" placeholder=\"0\" />\n              <Field required label=\"Pages\" name=\"pages\" placeholder=\"0\" />\n            </Form.Group>\n            <Form.Group widths={3}>\n              <Field required label=\"UDC\" name=\"udc\" placeholder=\"316.35\" />\n              <Field label=\"ISSN\" name=\"issn\" placeholder=\"1050-124X\" />\n              <Field label=\"DOI\" name=\"doi\" placeholder=\"10.15421/abc1234567890\" />\n            </Form.Group>\n            <Field type=\"textarea\" label=\"Annotation\" name=\"annotations\" placeholder=\"...\" />\n            <Field\n              type=\"checkbox\"\n              label=\"Scopus and Web of Science\"\n              name=\"isScopusAndWS\"\n              id=\"isScopusAndWS\"\n            />\n            <Field\n              type=\"checkbox\"\n              label=\"Other scientometrics databases\"\n              name=\"isScientometrics\"\n              id=\"isScientometrics\"\n            />\n            <Field type=\"checkbox\" label=\"Professional\" name=\"isProfessional\" id=\"isProfessional\" />\n            <Field type=\"checkbox\" label=\"Electronic\" name=\"isElectronic\" id=\"isElectronic\" />\n\n            <Button type=\"submit\" color={colors.main}>\n              {editMode ? 'Update' : 'Create'}\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nPeriodicityForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  editMode: PropTypes.bool,\n  post: PropTypes.object,\n  isAdmin: PropTypes.bool.isRequired,\n};\n\nexport default observer(PeriodicityForm);\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Button, Form } from 'semantic-ui-react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nimport { useStore } from '../../stores/createStore';\nimport UsersSelect from '../Form/UsersSelect/UsersSelect';\nimport Field from '../Form/Field/Field';\nimport { colors } from '../App/App';\n\nconst ThesisForm = ({ onSubmit, editMode = false, isAdmin, post = {} }) => {\n  const subauthors = post.subauthors ? post.subauthors.split(',').map(item => +item) : null;\n\n  const formikProps = {\n    initialValues: {\n      title: post?.title || '',\n      udc: post?.udc || '',\n      conference: post?.conference || '',\n      city: post?.city || '',\n      dates: post?.dates || '',\n      collectionPages: post?.collectionPages || '',\n      pages: post?.pages || '',\n      issn: post?.issn || null,\n      doi: post?.doi || null,\n      annotations: post?.annotations || null,\n      isScopusAndWS: post?.isScopusAndWS || false,\n      isScientometrics: post?.isScientometrics || false,\n      isInternational: post?.isInternational || false,\n      files: post?.files || null,\n      author: post?.author || null,\n      subauthors: post?.subauthors || null,\n    },\n\n    validationSchema: Yup.object().shape({}),\n\n    onSubmit,\n  };\n\n  const store = useStore();\n  const { isLoading, isError } = store.userPosts.addThesis;\n\n  return (\n    <Formik {...formikProps}>\n      {({ handleSubmit, setFieldValue, values }) => {\n        return (\n          <Form\n            error={isError}\n            loading={isLoading}\n            noValidate\n            onSubmit={handleSubmit}\n            className=\"attached\"\n          >\n            {/*{<Message error header=\"Log in failed\" content={errorMsg} />}*/}\n\n            {isAdmin && (\n              <UsersSelect\n                name=\"author\"\n                setFieldValue={setFieldValue}\n                label=\"Select author\"\n                placeholder=\"Select author\"\n                multiple={false}\n              />\n            )}\n            <UsersSelect\n              name=\"subauthors\"\n              setFieldValue={setFieldValue}\n              defaultValue={subauthors}\n              label=\"Select subauthors\"\n              placeholder=\"Select subauthors\"\n            />\n\n            <Field required label=\"Title\" name=\"title\" placeholder=\"Thesis title\" />\n            <Field required label=\"Conference\" name=\"conference\" placeholder=\"Florida High School Hockey Association Conference\" />\n            <Field required label=\"City\" name=\"city\" placeholder=\"Ivano-Frankivsk\" />\n            <Field required label=\"Dates\" name=\"dates\" placeholder=\"13 Jan. 2018\" />\n            <Form.Group widths={2}>\n              <Field required label=\"Collection pages\" name=\"collectionPages\" placeholder=\"0\" />\n              <Field required label=\"Pages\" name=\"pages\" placeholder=\"0\" />\n            </Form.Group>\n            <Form.Group widths={3}>\n              <Field required label=\"UDC\" name=\"udc\" placeholder=\"316.35\" />\n              <Field label=\"ISSN\" name=\"issn\" placeholder=\"1050-124X\" />\n              <Field label=\"DOI\" name=\"doi\" placeholder=\"10.15421/abc1234567890\" />\n            </Form.Group>\n            <Field type=\"textarea\" label=\"Annotation\" name=\"annotations\" placeholder=\"...\" />\n            <Field\n              type=\"checkbox\"\n              label=\"Scopus and Web of Science\"\n              name=\"isScopusAndWS\"\n              id=\"isScopusAndWS\"\n            />\n            <Field\n              type=\"checkbox\"\n              label=\"Other scientometrics databases\"\n              name=\"isScientometrics\"\n              id=\"isScientometrics\"\n            />\n            <Field\n              type=\"checkbox\"\n              label=\"International conference\"\n              name=\"isInternational\"\n              id=\"isInternational\"\n            />\n\n            <Button type=\"submit\" color={colors.main}>\n              { editMode ? 'Update' : 'Create' }\n            </Button>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nThesisForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n  editMode: PropTypes.bool,\n  post: PropTypes.object,\n  isAdmin: PropTypes.bool.isRequired,\n};\n\nexport default observer(ThesisForm);\n","import React, { useState } from 'react';\nimport { Container, Segment, Message, Form } from 'semantic-ui-react';\nimport { Option } from 'semantic-react';\nimport { observer } from 'mobx-react';\n\nimport s from './CreatePost.module.scss';\nimport { useStore } from '../../stores/createStore';\nimport SelectField from '../../components/Form/SelectField/SelectField';\nimport MonographForm from '../../components/PostForms/MonographForm';\nimport PeriodicityForm from '../../components/PostForms/PeriodicityForm';\nimport ThesisForm from '../../components/PostForms/ThesisForm';\n\nconst CreatePost = () => {\n  const store = useStore();\n  const { addPeriodic, addThesis, addMonograph } = store.userPosts;\n  const user = store.viewer.user;\n  const DEFAULT_VALUE = 'periodicity';\n  const [selected, setSelected] = useState(DEFAULT_VALUE);\n  const types = [\n    { value: 'periodicity', text: 'Periodicity' },\n    { value: 'thesis', text: 'Thesis' },\n    { value: 'monograph', text: 'Monograph' },\n  ];\n\n  const submitForm = ({ author, ...data }) => {\n    author = author ? author : user.id;\n    if (selected === 'periodicity') addPeriodic.run({author, ...data});\n    if (selected === 'thesis') addThesis.run({author, ...data});\n    if (selected === 'monograph') addMonograph.run({author, ...data});\n  };\n\n  return (\n    <Container>\n      <div className={s.form}>\n        <Message attached header=\"Here you can create your post!\" size=\"huge\" />\n        <Segment padded=\"very\" attached>\n          {/* --- Select post type --- */}\n          <Form style={{ marginBottom: '17px' }}>\n            <SelectField\n              getValue={(val) => setSelected(val[0])}\n              formik={false}\n              label=\"Choose post type\"\n              defaultValue={[DEFAULT_VALUE]}\n            >\n              {types.map(({ value, text }) => (\n                <Option key={value} value={value}>\n                  {text}\n                </Option>\n              ))}\n            </SelectField>\n          </Form>\n          {/* --------- */}\n\n          {selected === 'monograph' && (\n            <MonographForm onSubmit={submitForm} isAdmin={user.isAdmin} />\n          )}\n          {selected === 'periodicity' && (\n            <PeriodicityForm onSubmit={submitForm} isAdmin={user.isAdmin} />\n          )}\n          {selected === 'thesis' && (\n            <ThesisForm onSubmit={submitForm} isAdmin={user.isAdmin} />\n          )}\n        </Segment>\n      </div>\n    </Container>\n  );\n};\n\nexport default observer(CreatePost);\n","import React, { useEffect, Fragment, useState } from 'react';\nimport { generatePath, Link, Redirect, useParams, useHistory } from 'react-router-dom';\nimport {\n  Button,\n  Container,\n  Divider,\n  Header,\n  Icon,\n  Label,\n  Loader,\n  Segment,\n} from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\nimport PropTypes from 'prop-types';\n\nimport { routes } from 'src/scenes/routes';\n\nimport s from './Post.module.scss';\nimport { colors } from '../App/App';\nimport { useStore } from '../../stores/createStore';\n\nexport const Record = ({ post, label, field, maybeNull = false }) => {\n  if (maybeNull) {\n    return (\n      <Fragment>\n        {post[field] && (\n          <div>\n            {label}: <span>{post[field]}</span>\n          </div>\n        )}\n      </Fragment>\n    );\n  }\n\n  return (\n    <div>\n      {label}: <span>{post[field]}</span>\n    </div>\n  );\n};\n\nconst Post = ({ children, useCollection, apiMethodForPostEdit, apiMethodForDelete, type }) => {\n  const [files, setFiles] = useState(null);\n  const [editMode, setEditMode] = useState(false);\n  const params = useParams();\n  const history = useHistory();\n  const { collection, getById, editFiles, deleteById } = useCollection();\n  const post = collection.get(params.id);\n  const store = useStore();\n  const addImageRef = React.createRef();\n  const isViewer = store.viewer?.user?.id === post?.author;\n  const created = post && new Date(post.createdAt);\n  const updated = post && new Date(post.updatedAt);\n\n  useEffect(() => {\n    getById.run(params.id);\n  }, [params.id]);\n\n  if (deleteById.redirect) {\n    return <Redirect to={generatePath(routes.account, { username: store.viewer.user.username })} />;\n  }\n\n  const handleFileChange = (e) => setFiles(e.target.files);\n  const handlePostDelete = () => deleteById.run(post.id, apiMethodForDelete);\n  const handleFilesSubmit = () => {\n    editFiles.run(post.id, files, apiMethodForPostEdit);\n    setEditMode(false);\n    setFiles(null);\n  };\n  const cancelFilesSubmit = () => {\n    setFiles(null);\n    setEditMode(false);\n  };\n\n  return (\n    <Container className={s.container}>\n      {getById.isLoading && <Loader />}\n      {!getById.isLoading && !post && (\n        <Header as=\"h2\" icon textAlign=\"center\">\n          <Icon name=\"x\" />\n          Post not found\n        </Header>\n      )}\n\n      {post && (\n        <Segment padded className={s.segment} loading={deleteById.isLoading}>\n          <div className={s.header}>\n            <Header as=\"h1\">{post.title}</Header>\n\n            <Label.Group size=\"small\" className={s.tags} tag>\n              {post.isElectronic && <Label>Electronic</Label>}\n              {post.isEuLanguage && <Label>European language</Label>}\n              {post.isScopusAndWS && <Label>Scopus and Web of Science</Label>}\n              {post.isScientometrics && <Label>Scientometric databases</Label>}\n              {post.isProfessional && <Label>Professional</Label>}\n              {post.isInternational && <Label>International conference</Label>}\n            </Label.Group>\n          </div>\n\n          <div>\n            {post.Users.map(({ id, username }) => (\n              <Link\n                key={id}\n                className={id !== post.author ? s.subauthor : s.mainAuthor}\n                to={generatePath(routes.account, { username })}\n              >\n                {username}\n              </Link>\n            ))}\n          </div>\n\n          <div className={s.info}>\n            {React.Children.map(children, (child) => {\n              return React.cloneElement(child, { post });\n            })}\n          </div>\n\n          <p className={s.desc}>{post.annotations}</p>\n\n          {/*---------- MATERIALS ----------*/}\n          <Divider horizontal>Materials</Divider>\n          <div>\n            {isViewer && (!post.files || editMode) && (\n              <React.Fragment>\n                <div className={s.add_btn}>\n                  {files ? (\n                    <Button.Group attached size=\"tiny\">\n                      <Button onClick={cancelFilesSubmit}>Cancel</Button>\n                      <Button.Or />\n                      <Button onClick={handleFilesSubmit} positive>\n                        Save\n                      </Button>\n                    </Button.Group>\n                  ) : (\n                    <Button\n                      icon=\"add\"\n                      size=\"tiny\"\n                      content=\"Add files\"\n                      color={colors.second}\n                      labelPosition=\"left\"\n                      onClick={() => addImageRef.current.click()}\n                    />\n                  )}\n\n                  {files && (\n                    <Header as=\"h5\" className={s.file_attached}>\n                      <Icon name=\"file archive\" />\n                      <Header.Content>{files[0].name}</Header.Content>\n                    </Header>\n                  )}\n                </div>\n                <Header as=\"h6\" color=\"red\" className={s.file_attached}>\n                  Attach .zip, .rar or .7z file\n                </Header>\n                <input\n                  accept=\".zip, .rar, .7z\"\n                  onChange={handleFileChange}\n                  ref={addImageRef}\n                  type=\"file\"\n                  name=\"files\"\n                  className=\"none\"\n                />\n              </React.Fragment>\n            )}\n\n            {post.files && !editMode && (\n              <div>\n                <Button\n                  content=\"Download materials\"\n                  color={colors.main}\n                  icon=\"download\"\n                  labelPosition=\"right\"\n                  as=\"a\"\n                  href={post.files}\n                />\n\n                <div className={s.icons}>\n                  <Icon name=\"edit\" onClick={() => setEditMode(true)}>\n                    Edit files\n                  </Icon>\n                </div>\n              </div>\n            )}\n\n            {!post.files && !editMode && (\n              <Header as='h4'>\n                No materials\n              </Header>\n            )}\n          </div>\n          <Divider />\n          {/*-------------------------------*/}\n\n          <div className={s.bottom}>\n            <div className={s.date}>\n              <div>\n                <span>Created:</span> {created.toLocaleDateString()} {created.toLocaleTimeString()}\n              </div>\n              <div>\n                <span>Updated:</span> {updated.toLocaleDateString()} {updated.toLocaleTimeString()}\n              </div>\n            </div>\n\n            {isViewer && (\n              <div className={s.action_icons}>\n                <Icon name=\"trash\" size=\"large\" color=\"red\" onClick={handlePostDelete} />\n                <Icon\n                  name=\"edit\"\n                  size=\"large\"\n                  color=\"green\"\n                  onClick={() =>\n                    history.push(\n                      generatePath(routes.editPost, {\n                        type,\n                        postId: post.id,\n                      }),\n                    )\n                  }\n                />\n              </div>\n            )}\n          </div>\n        </Segment>\n      )}\n    </Container>\n  );\n};\n\nPost.propTypes = {\n  children: PropTypes.node,\n  useCollection: PropTypes.func.isRequired,\n};\n\nRecord.propTypes = {\n  post: PropTypes.object,\n  label: PropTypes.string.isRequired,\n  field: PropTypes.string.isRequired,\n  maybeNull: PropTypes.bool,\n};\n\nexport default observer(Post);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport { usePeriodicityCollection } from '../../stores/posts/periodicityCollection';\nimport Post, { Record } from '../../components/Post/Post';\nimport * as Api from '../../api';\n\nconst PeriodicPost = () => {\n  return (\n    <Post\n      useCollection={usePeriodicityCollection}\n      apiMethodForDelete={Api.Posts.deletePeriodicity}\n      apiMethodForPostEdit={Api.Posts.editPeriodicity}\n      type='periodicity'\n    >\n      <Record label=\"UDC\" field=\"udc\" />\n      <Record label=\"ISSN\" field=\"issn\" maybeNull />\n      <Record label=\"DOI\" field=\"doi\" maybeNull />\n      <Record label=\"Journal\" field=\"journal\" />\n      <Record label=\"Issue number\" field=\"issueNumber\" />\n      <Record label=\"Journal pages\" field=\"journalPages\" />\n      <Record label=\"Pages\" field=\"pages\" />\n    </Post>\n  );\n};\n\nexport default observer(PeriodicPost);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport { useMonographsCollection } from '../../stores/posts/monographsCollection';\nimport Post, { Record } from '../../components/Post/Post';\nimport * as Api from '../../api';\n\nconst PeriodicPost = () => {\n  return (\n    <Post\n      useCollection={useMonographsCollection}\n      apiMethodForDelete={Api.Posts.deleteMonograph}\n      apiMethodForPostEdit={Api.Posts.editMonograph}\n      type='monograph'\n    >\n      <Record label=\"Section\" field=\"section\" maybeNull />\n      <Record label=\"ISBN\" field=\"isbn\" maybeNull />\n      <Record label=\"DOI\" field=\"doi\" maybeNull />\n      <Record label=\"Pages\" field=\"monographPages\" />\n      <Record label=\"Print pages\" field=\"printPages\" />\n      <Record label=\"Pages\" field=\"pages\" />\n      <Record label=\"Year\" field=\"year\" />\n    </Post>\n  );\n};\n\nexport default observer(PeriodicPost);\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport { useThesisCollection } from '../../stores/posts/thesisCollection';\nimport Post, { Record } from '../../components/Post/Post';\nimport * as Api from '../../api';\n\nconst PeriodicPost = () => {\n  return (\n    <Post\n      useCollection={useThesisCollection}\n      apiMethodForDelete={Api.Posts.deleteThesis}\n      apiMethodForPostEdit={Api.Posts.editThesis}\n      type='thesis'\n    >\n      <Record label=\"UDC\" field=\"udc\" />\n      <Record label=\"ISSN\" field=\"issn\" maybeNull />\n      <Record label=\"DOI\" field=\"doi\" maybeNull />\n      <Record label=\"Conference\" field=\"conference\" />\n      <Record label=\"City\" field=\"city\" />\n      <Record label=\"Dates\" field=\"dates\" />\n      <Record label=\"Collection pages\" field=\"collectionPages\" />\n      <Record label=\"Pages\" field=\"pages\" />\n    </Post>\n  );\n};\n\nexport default observer(PeriodicPost);\n","import React, { useEffect } from 'react';\nimport { generatePath, Redirect, useParams } from 'react-router-dom';\nimport { Container, Segment, Message } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\n\nimport s from './EditPost.module.scss';\nimport { useStore } from '../../stores/createStore';\nimport MonographForm from '../../components/PostForms/MonographForm';\nimport PeriodicityForm from '../../components/PostForms/PeriodicityForm';\nimport ThesisForm from '../../components/PostForms/ThesisForm';\nimport { useMonographsCollection } from '../../stores/posts/monographsCollection';\nimport { usePeriodicityCollection } from '../../stores/posts/periodicityCollection';\nimport { useThesisCollection } from '../../stores/posts/thesisCollection';\nimport * as Api from '../../api';\nimport { routes } from '../routes';\n\nconst EditPost = () => {\n  const store = useStore();\n  const params = useParams();\n  const isPeriodicity = params.type === 'periodicity';\n  const isThesis = params.type === 'thesis';\n  const isMonograph = params.type === 'monograph';\n  const useCollection = (isPeriodicity && usePeriodicityCollection) || (isThesis && useThesisCollection) || (isMonograph && useMonographsCollection);\n  const { collection, getById, editPost } = useCollection();\n  const post = collection.get(params.postId);\n  const user = store.viewer.user;\n  const apiMethod = (isPeriodicity && Api.Posts.editPeriodicity) || (isThesis && Api.Posts.editThesis) || (isMonograph && Api.Posts.editMonograph);\n  const postRoute = (isPeriodicity && routes.periodicityPost) || (isThesis && routes.thesisPost) || (isMonograph && routes.monographPost);\n\n  const submitForm = ({ author, ...data }) => {\n    author = author ? author : user.id;\n\n    editPost.run(params.postId, { author, ...data }, apiMethod);\n  };\n\n  useEffect(() => {\n    getById.run(params.postId);\n  }, [params.postId]);\n\n  if (editPost.redirect) {\n    return <Redirect to={generatePath(postRoute, { id: params.postId })} />;\n  }\n\n  return (\n    <Container>\n      <div className={s.form}>\n        <Message attached header=\"Update your post!\" size=\"huge\" />\n        <Segment padded=\"very\" attached loading={editPost.isLoading}>\n\n          {isMonograph && post && (\n            <MonographForm onSubmit={submitForm} editMode post={post} />\n          )}\n          {isPeriodicity && post && (\n            <PeriodicityForm onSubmit={submitForm} editMode post={post} />\n          )}\n          {isThesis && post && (\n            <ThesisForm onSubmit={submitForm} editMode post={post} />\n          )}\n        </Segment>\n      </div>\n    </Container>\n  );\n};\n\nexport default observer(EditPost);\n","import React, { useEffect, useState } from 'react';\nimport { generatePath, useHistory } from 'react-router-dom';\nimport { Accordion, Header, Icon, Item, Loader } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\n\nimport { useStore } from '../../../../stores/createStore';\n\nimport s from './Users.module.scss';\nimport EditForm from '../../../../components/EditForm/EditForm';\nimport { useUserCollection } from '../../../../stores/users/usersCollection';\nimport * as Api from '../../../../api';\nimport { useMonographsCollection } from '../../../../stores/posts/monographsCollection';\nimport { useThesisCollection } from '../../../../stores/posts/thesisCollection';\nimport { usePeriodicityCollection } from '../../../../stores/posts/periodicityCollection';\nimport { routes } from '../../../routes';\n\nconst PostsList = ({ posts, apiMethodForDelete, postCollection, type }) => {\n  const { deleteById } = postCollection();\n  const history = useHistory();\n\n  const handlePostDelete = (id) => deleteById.run(id, apiMethodForDelete);\n\n  return (\n    <React.Fragment>\n      {!posts[0] && <Header as=\"h4\">No posts!</Header>}\n      {posts.map((post) => {\n        return (\n          <Item>\n            <Item.Content>\n              <Item.Header as=\"a\">{post.title}</Item.Header>\n              <Item.Extra>\n                <Icon\n                  onClick={() => handlePostDelete(post.id)}\n                  name=\"trash\"\n                  color=\"red\"\n                  size=\"large\"\n                  className={s.icon}\n                />\n                <Icon\n                  onClick={() =>\n                    history.push(\n                      generatePath(routes.editPost, {\n                        type,\n                        postId: post.id,\n                      }),\n                    )\n                  }\n                  name=\"edit\"\n                  color=\"blue\"\n                  size=\"large\"\n                  className={s.icon}\n                />\n              </Item.Extra>\n            </Item.Content>\n          </Item>\n        );\n      })}\n    </React.Fragment>\n  );\n};\n\nconst Users = () => {\n  const store = useStore();\n  const { fetchAll, items } = store.users;\n  const [activeIndex, setActiveIndex] = useState();\n  const [activeIndexPost, setActiveIndexPost] = useState();\n  const [editUserMode, setEditUserMode] = useState({\n    show: false,\n    id: null,\n  });\n  const { deleteById } = useUserCollection();\n  const monographCollection = useMonographsCollection;\n  const thesisCollection = useThesisCollection;\n  const periodicityCollection = usePeriodicityCollection;\n\n  const handleClick = (e, titleProps) => {\n    const { index } = titleProps;\n    const newIndex = activeIndex === index ? -1 : index;\n\n    setActiveIndex(newIndex);\n  };\n\n  const handleClickPost = (e, titleProps) => {\n    const { index } = titleProps;\n    const newIndex = activeIndexPost === index ? -1 : index;\n\n    setActiveIndexPost(newIndex);\n  };\n\n  const handleDeleteUser = (id, username) => deleteById.run(id, username);\n  const openEditUserMode = (id) => setEditUserMode({ show: true, id });\n  const closeEditUserMode = () => setEditUserMode({ show: false, id: null });\n\n  useEffect(() => {\n    fetchAll.run();\n  }, []);\n\n  return (\n    <Accordion fluid styled>\n      <Loader active={fetchAll.isLoading} />\n      {items.map((user) => {\n        return (\n          <React.Fragment>\n            <Accordion.Title active={activeIndex === user.id} index={user.id} onClick={handleClick}>\n              <Icon name=\"dropdown\" />\n              {user.usernameString}\n            </Accordion.Title>\n            <Accordion.Content active={activeIndex === user.id}>\n              {!editUserMode.show && (\n                <React.Fragment>\n                  <Icon\n                    onClick={() => handleDeleteUser(user.id, user.username)}\n                    name=\"user delete\"\n                    color=\"red\"\n                    size=\"large\"\n                    className={s.icon}\n                  />\n                  <Icon\n                    onClick={() => openEditUserMode(user.id)}\n                    name=\"edit\"\n                    color=\"blue\"\n                    size=\"large\"\n                    className={s.icon}\n                  />\n                </React.Fragment>\n              )}\n\n              {editUserMode.show && editUserMode.id === user.id && (\n                <EditForm user={user} cancelEdit={closeEditUserMode} isViewer={false} />\n              )}\n\n              <Accordion fluid styled>\n                <Accordion.Title active={activeIndexPost === 1} index={1} onClick={handleClickPost}>\n                  <Icon name=\"dropdown\" />\n                  Monographs\n                </Accordion.Title>\n                <Accordion.Content active={activeIndexPost === 1}>\n                  <Item.Group divided>\n                    <PostsList\n                      posts={user.Monographs}\n                      apiMethodForEdit={Api.Posts.deleteMonograph}\n                      apiMethodForDelete={Api.Posts.editMonograph}\n                      postCollection={monographCollection}\n                      type=\"monograph\"\n                    />\n                  </Item.Group>\n                </Accordion.Content>\n\n                <Accordion.Title active={activeIndexPost === 2} index={2} onClick={handleClickPost}>\n                  <Icon name=\"dropdown\" />\n                  Periodicity\n                </Accordion.Title>\n                <Accordion.Content active={activeIndexPost === 2}>\n                  <Item.Group divided>\n                    <PostsList\n                      posts={user.Periodicities}\n                      apiMethodForEdit={Api.Posts.deletePeriodicity}\n                      apiMethodForDelete={Api.Posts.editPeriodicity}\n                      postCollection={periodicityCollection}\n                      type=\"periodicity\"\n                    />\n                  </Item.Group>\n                </Accordion.Content>\n\n                <Accordion.Title active={activeIndexPost === 3} index={3} onClick={handleClickPost}>\n                  <Icon name=\"dropdown\" />\n                  Thesis\n                </Accordion.Title>\n                <Accordion.Content active={activeIndexPost === 3}>\n                  <Item.Group divided>\n                    <PostsList\n                      posts={user.Theses}\n                      apiMethodForEdit={Api.Posts.deleteThesis}\n                      apiMethodForDelete={Api.Posts.editThesis}\n                      postCollection={thesisCollection}\n                      type=\"thesis\"\n                    />\n                  </Item.Group>\n                </Accordion.Content>\n              </Accordion>\n            </Accordion.Content>\n          </React.Fragment>\n        );\n      })}\n    </Accordion>\n  );\n};\n\nexport default observer(Users);\n","import React, { useState } from 'react';\nimport { Container, Grid, Menu, Segment } from 'semantic-ui-react';\nimport { observer } from 'mobx-react';\n\nimport s from './AdminPanel.module.scss';\nimport Users from './components/Users/Users';\nimport { useStore } from '../../stores/createStore';\n\nconst AdminPanel = () => {\n  const [activeItem, setActiveItem] = useState('users');\n\n  const handleItemClick = (e, { name }) => setActiveItem(name);\n\n  return (\n    <Container className={s.container}>\n      <Grid>\n        <Grid.Column width={4}>\n          <Menu fluid vertical tabular>\n            <Menu.Item name=\"users\" active={activeItem === 'users'} onClick={handleItemClick} />\n            <Menu.Item\n              name=\"reporting\"\n              active={activeItem === 'reporting'}\n              onClick={handleItemClick}\n            />\n          </Menu>\n        </Grid.Column>\n\n        <Grid.Column stretched width={12}>\n          {activeItem === 'users' && <Users />}\n          {activeItem === 'reporting' && <Segment>reporting</Segment>}\n        </Grid.Column>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default observer(AdminPanel);\n","import React from 'react';\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\nimport { observer } from 'mobx-react';\n\nimport { useStore } from '../stores/createStore';\nimport Header from '../components/Header/Header';\nimport Home from './Home/Home';\nimport Auth from './Auth/Auth';\nimport Account from './Account/Account';\nimport CreatePost from './CreatePost/CreatePost';\nimport PeriodicPost from './PeriodicPost/PeriodicPost';\nimport MonographPost from './MonographPost/MonographPost';\nimport ThesisPost from './ThesisPost/ThesisPost';\nimport EditPost from './EditPost/EditPost';\nimport AdminPanel from './AdminPanel/AdminPanel';\n\nexport const routes = {\n  home: '/',\n\n  auth: '/auth',\n  register: '/auth/register',\n  login: '/auth/login',\n\n  account: '/account/:username',\n\n  monographs: '/account/:username/monographs',\n  periodicity: '/account/:username/periodicity',\n  thesis: '/account/:username/thesis',\n\n  monographPost: '/monographs/:id',\n  periodicityPost: '/periodicity/:id',\n  thesisPost: '/thesis/:id',\n\n  createPost: '/create',\n  editPost: '/edit_post/:type/:postId',\n\n  cathedra: '/:cathedraName',\n\n  adminPanel: '/admin',\n};\n\nexport const PrivateRouter = observer(({ component: Component, ...props }) => {\n  const store = useStore();\n  const { isLoggedIn } = store.auth;\n\n  return (\n    <Route\n      {...props}\n      render={({ ...renderProps }) =>\n        isLoggedIn ? <Component {...renderProps} /> : <Redirect to={routes.login} />\n      }\n    />\n  );\n});\n\nconst Router = () => {\n  return (\n    <BrowserRouter>\n      <Header />\n\n      <Switch>\n        <Route exact path={routes.home} component={Home} />\n        <Route path={routes.auth} component={Auth} />\n        <PrivateRouter exact path={routes.createPost} component={CreatePost} />\n        <PrivateRouter exact path={routes.editPost} component={EditPost} />\n        <PrivateRouter path={routes.account} component={Account} />\n        <Route path={routes.periodicityPost} component={PeriodicPost} />\n        <Route path={routes.monographPost} component={MonographPost} />\n        <Route path={routes.thesisPost} component={ThesisPost} />\n        <Route path={routes.adminPanel} component={AdminPanel} />\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default Router;\n","import React from 'react';\nimport { Loader as SemanticLoader } from 'semantic-ui-react'\nimport PropTypes from 'prop-types';\n\nconst Loader = ({ active = false, size = 'big', text, ...props }) => {\n  return (\n    <SemanticLoader active={active} size={size} {...props}>\n      {text}\n    </SemanticLoader>\n  );\n};\n\nLoader.propTypes = {\n  active: PropTypes.bool,\n  size: PropTypes.string,\n  text: PropTypes.node,\n};\n\nexport default Loader;\n","import React, { useEffect, useState } from 'react';\nimport { observer } from 'mobx-react';\nimport 'semantic-ui-css/semantic.min.css';\n\nimport { Provider, createStore } from 'src/stores/createStore';\nimport Router from '../../scenes/routes';\nimport Loader from '../elements/Loader/Loader';\nimport './App.scss';\n\nexport const colors = {\n  main: 'teal',\n  second: 'yellow',\n  neutral: 'standard',\n};\n\nexport const apiPath = 'http://localhost:3001/';\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const store = createStore();\n\n  useEffect(() => {\n    store.bootstrap().then(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div>\n      <Provider value={store}>\n        {isLoading ? <Loader active={isLoading} /> : <Router />}\n      </Provider>\n    </div>\n  );\n};\n\nexport default observer(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}